@model  AcsItemOutViewModel
@using Vereyon.Web
@{
    var defaultTakeOutDate = (DateTime.Now).AddDays(1);
    var minTakeOutDate = DateTime.Now;
    var maxTakeOutDate = AcsModelHelper.GetLastDateOfMonth(1);
    var defaultTakeOutDateString = defaultTakeOutDate.ToString();
    var gridDateFormat = AcsModelHelper.GetGridDateFormat();
    var isRequiredSuperior = AcsModelHelper.IsRequiredSuperiorApproval(Model.RequestEmployee.PositionID);
}
@Html.RenderFlashMessages()
<div class="animated fadeIn">
    @using (Html.BeginForm("Create", "AcsItemOut", FormMethod.Post, new { @id = "create - form", @class = "form-horizontal", @novalidate = "novalidate" }))
    {
        @Html.AntiForgeryToken()
        <div class="well well-warning">
            @MessageResource.MSG0037
        </div>
        <div class="well well-sm">
            <div class="form-group">
                @Html.LabelFor(m => m.CreateBy, new { @class = "col-md-2 control-label" })
                <div class="col-md-2 control-text">
                    @Html.DisplayFor(m=>m.RequestEmployeeName)
                </div>
                @Html.LabelFor(m => m.RequestEmployee.Department, new { @class = "col-md-2 control-label" })
                <div class="col-md-2 control-text">
                    @Html.DisplayFor(m=>m.RequestEmployeeDepartmentName)
                </div>
                @Html.LabelFor(m => m.CreateDate, new { @class = "col-md-2 control-label" })
                <div class="col-md-2 control-text">
                    @Html.DisplayDate(Model.CreateDate)
                </div>
            </div>
            <div class="form-group">
                @Html.LabelRequiredHintFor(m => m.TakeOutName, new { @class = "col-md-2 control-label" })
                <div class="col-md-2">
                    @(Html.Kendo().TextBoxFor(m => m.TakeOutName)
                       .HtmlAttributes(new { @style = "width:100%", @required = "required", @data_field = Html.DisplayNameFor(m => m.TakeOutName) })
                    )
                </div>
                @Html.LabelRequiredHintFor(m => m.Company, new { @class = "col-md-2 control-label" })
                <div class="col-md-2">
                    @(Html.Kendo().TextBoxFor(m => m.Company)
                       .HtmlAttributes(new { @style = "width:100%", @required = "required", @data_field = Html.DisplayNameFor(m => m.Company) })
                    )
                </div>
                @Html.LabelRequiredHintFor(m => m.Department, new { @class = "col-md-2 control-label" })
                <div class="col-md-2">
                    @(Html.Kendo().TextBoxFor(m => m.Department)
                        .HtmlAttributes(new { @style = "width:100%", @required = "required", @data_field = Html.DisplayNameFor(m => m.Department) })
                    )
                </div>
            </div>
            <div class="form-group">
                @Html.LabelRequiredHintFor(m => m.TakeOutDate, new { @class = "col-md-2 control-label" })
                <div class="col-md-2">
                    @(Html.Kendo().DatePickerFor(m => m.TakeOutDate)
                        .Min(minTakeOutDate)
                        .Max(maxTakeOutDate)
                        .Value(defaultTakeOutDate)
                        .HtmlAttributes(new { data_default = defaultTakeOutDateString  })
                        .Events(ev => ev.Change("datePickerChange"))
                    )
                    @Html.KendoValidationMessageFor(m=>m.TakeOutDate)
                </div>
                @Html.LabelRequiredHintFor(m => m.AreaID, new { @class = "col-md-2 control-label" })
                <div class="col-md-4">
                    @(Html.Kendo().DropDownListFor(m => m.AreaID)
                        .DataSource(ds => ds.Read(r => r.Url("/api/area/list")))
                        .DataValueField("AreaID")
                        .DataTextField("Name")
                        .OptionLabel(WidgetResource.SelectOptions)
                        .HtmlAttributes(new { @style = "width:100%", @required = "required", @data_field = Html.DisplayNameFor(m => m.AreaID) })
                    )
                </div>
            </div>
            <div class="form-group">
                @Html.LabelRequiredHintFor(m => m.PurposeCodeID, new { @class = "col-md-2 control-label" })
                <div class="col-md-2">
                    @(Html.Kendo().DropDownListFor(m => m.PurposeCodeID)
                            .DataSource(ds => ds.Read(r => r.Url("/api/miscs/list/" + PurposeRequestTypes.ItemOut)
                            .Type(HttpVerbs.Get)))
                            .DataTextField("Name")
                            .DataValueField("Value")
                            .Filter(FilterType.Contains)
                            .OptionLabel(WidgetResource.SelectOptions)
                            .HtmlAttributes(new { style = "width:100%", @required = "required", @data_field = Html.DisplayNameFor(m => m.PurposeCodeID) })
                            .Events(ev => ev.Change("purposeCodeChange").DataBound("purposeCodeDataBound"))
                    )
                </div>
                @Html.LabelRequiredHintFor(m => m.OtherPurpose, new { @class = "col-md-2 control-label other-purpose" })
                <div class="col-md-4 other-purpose" style="display:none">
                    @(Html.Kendo().TextBoxFor(m => m.OtherPurpose).HtmlAttributes(new { style = "width:100%", @data_field = Html.DisplayNameFor(m => m.OtherPurpose) })
                    )
                </div>
            </div>
        </div>

        <h2><i class="fa fa-th-list"></i> @ViewResource.AcsItemOut_ItemList_Title</h2>
        <div class="row">
            <div class="grid-container col-sm-12">
                @(Html.Kendo().Grid<AcsItemOutItemViewModel>()
                    .Name("itemGrid")
                    .Scrollable()
                    .Pageable(p => p
                    .PageSizes(true)
                    .Refresh(true)
                    .ButtonCount(5)
                )
                .Editable(editable => editable.Mode(GridEditMode.PopUp)
                        .TemplateName("ItemEditor")
                        .Window(w => w.Width(900)
                        .Scrollable(false))
                )
                .ToolBar(t => t.Template(Html.GridAddButton().ToHtmlString()))
                .Columns(c =>
                {
                    c.Template(t => { })
                      .Width(90)
                      .ClientTemplate(Html.GridEditDeleteButtons().ToHtmlString());
                    c.Template(t => { })
                      .Width(60)
                      .HtmlAttributes(new { @class = "text-right" })
                      .ClientTemplate("#=_rowNo#")
                      .Title(WidgetResource.Grid_Column_No);
                    c.Bound(f => f.ItemTypeName);
                    c.Bound(f => f.ItemName);
                    c.Bound(f => f.Description);
                    c.Bound(f => f.Confidential)
                                    .Width(100)
                                    .ClientTemplate("#=renderConfidential(data)#")
                                    .HtmlAttributes(new { @class = "text-center" });
                    c.Bound(f => f.RequestItemQty)
                                    .Width(120)
                                    .HtmlAttributes(new { @class = "text-right" }); ;
                    c.Bound(f => f.PlanReturnDate)
                                    .Width(120)
                                    .Format(gridDateFormat)
                                    .HtmlAttributes(new { @class = "text-center" });
                })
                .DataSource(ds => ds
                    .Custom().Transport(t =>
                    {
                        t.Read(r => r.Action("ListItem", "AcsItemOut", new { tmpDataID = Model.TempDataId })
                            .Type(HttpVerbs.Post));
                        t.Create(r => r.Action("CreateItemList", "AcsItemOut", new { tmpDataID = Model.TempDataId })
                            .Type(HttpVerbs.Post));
                        t.Update(r => r.Action("UpdateItemList", "AcsItemOut", new { tmpDataID = Model.TempDataId })
                            .Type(HttpVerbs.Post));
                        t.Destroy(r => r.Action("DeleteItemList", "AcsItemOut", new { tmpDataID = Model.TempDataId })
                            .Type(HttpVerbs.Post));
                    })
                .Schema(s =>
                {
                    s.Data("Data").Total("Total").Errors("Errors");
                    s.Model(m =>
                    {
                        m.Id(f => f.DetailID);
                        m.Field(f => f.RequestItemQty).DefaultValue(1);
                    });
                })
                            .PageSize(20)
                            .ServerFiltering(true)
                            .ServerPaging(true)
                            .ServerSorting(true)
                            .Events(e =>
                            {
                                e.RequestStart("dataSourceRequestStart");
                                e.RequestEnd("dataSourceRequestEnd");
                                e.Error("dataSourceError");
                            })
                )
                .Events(ev =>
                {
                    ev.DataBinding("gridBinding");
                    ev.Edit("gridEdit");
                    ev.Save("gridSave");
                    ev.Cancel("gridCancel");
                })
                )
            </div>
        </div>
        @Html.Hidden("AcsItemOutDetails", "[]")
        <h2><i class="fa fa-list-ul"></i> @ViewResource.ApprovalSection_Title</h2>
        <div class="well well-sm">
            @if (isRequiredSuperior)
            {
                <div class="form-group">
                    @Html.LabelRequiredHintFor(m => m.SuperiorApproveUserName, new { @class = "col-md-3 col-lg-2 control-label required-hint" })
                    <div class="col-md-4">
                        @(Html.Kendo().DropDownListFor(m => m.SuperiorApproveUserName)
                        .DataSource(ds => ds.Read(r => r.Url("/api/approvals/superior")))
                        .DataTextField("EmployeeName")
                        .DataValueField("UserName")
                        .Filter(FilterType.Contains)
                        .HtmlAttributes(new { style = "width: 100%", required = "required", data_field = Html.DisplayNameFor(m => m.SuperiorApproveUserName) })
                        .OptionLabel(WidgetResource.SelectOptions)
                        )
                    </div>
                </div>
            }
            <div class="form-group">
                @Html.LabelRequiredHintFor(m => m.GAApproveUserName, new { @class = "col-md-2 control-label" })
                <div class="col-md-4">
                    @(Html.Kendo().DropDownListFor(m => m.GAApproveUserName)
                        .DataSource(ds => ds.Read(r =>
                            r.Url("/api/approvals/ga"))
                        )
                        .DataTextField("EmployeeName")
                        .DataValueField("UserName")
                        .Filter(FilterType.Contains)
                        .HtmlAttributes(new { style = "width: 100%" , required = "required", data_field = Html.DisplayNameFor(m => m.GAApproveUserName) })
                        .OptionLabel(WidgetResource.SelectOptions)
                    )
                </div>
            </div>
        </div>

        <h2><i class="fa fa-file-text-o"></i> @ViewResource.NoteSection_Title</h2>
        <div class="well well-sm">
            @(Html.Kendo().EditorFor(m => m.Note)
                .Tools(t => t.Clear()
                      .Bold().Italic().Underline().Strikethrough()
                      .JustifyLeft().JustifyCenter().JustifyRight().JustifyFull()
                      .InsertUnorderedList().InsertOrderedList()
                      .Outdent().Indent()
                      .Formatting()
                      .CleanFormatting()
                )
                .Value(Html.DisplayHtmlFor(m => m.Note).ToString())
                .HtmlAttributes(new { @class = "k-textbox", style = "width:100%", @maxlength = 4000 })
            )
        </div>

        <div class="button-container text-center">
            @Html.KendoConfirmButton("saveButton", "save" , WidgetResource.Button_Save_Text, new { @class = "k-primary", @data_content = MessageHelper.ConfirmSave() })
        </div>

        <div class="k-validation-summary alert alert-danger" style="display:none"></div>
    }
</div>

@section scripts
    {
    <script type="text/javascript">
        var uiState = new AppUIState();
        var validator;
        $(document).ready(function (e) {
            app.initPage();
            uiState.register("save", [{ elem: "#saveButton", busyContent: "<i class=\"fa fa-spin fa-spinner\"></i> @WidgetResource.Button_Busy_Text" }, ".k-button"]);

            validator = $("form").kendoValidator({
                rules: {
                    otherPurpose: function (input) {
                        if (input.is("[name=@Html.NameFor(m => m.OtherPurpose)]") && input.val() == "") {
                            var d = $("#@Html.IdFor(m=>m.PurposeCodeID)").data("kendoDropDownList");
                            var dataItem = d.dataItem();
                            if (dataItem && dataItem.Key !== undefined) {
                                return !(dataItem.Key.toUpperCase() == "OTHER");
                            }
                        }
                        return true;
                    },
                    requireAcsItemOutDetail: function (input) {
                        if (input.is("[name=@Html.NameFor(m=>m.AcsItemOutDetails)]"))
                        {
                            var gridId = "#itemGrid";
                            var grid = $(gridId).data("kendoGrid");
                            return grid.dataSource.data().toJSON().length > 0;
                        }
                        return true;
                    },
                    takeOutDate: function (input) {
                        if (input.is("[name=@Html.NameFor(m=>m.TakeOutDate)]")) {
                            var takeOutDate = $("#TakeOutDate").data("kendoDatePicker").value();
                            var minTakeOutDate = getMinPlanReturnDate();
                            if (minTakeOutDate.getFullYear() > takeOutDate.getFullYear()) {
                                return true;
                            }

                            if (minTakeOutDate.getFullYear() == takeOutDate.getFullYear()) {
                                if (minTakeOutDate.getMonth() == takeOutDate.getMonth()) {
                                    if (minTakeOutDate.getDate() >= takeOutDate.getDate()) {
                                        return true;
                                    }
                                } else if (minTakeOutDate.getMonth() > takeOutDate.getMonth()) {
                                    return true;
                                }
                            }

                            return false;
                        }
                        return true;
                    }
                },
                messages: {
                    otherPurpose: function (input) {
                        return app.ui.getRequiredMessage(input);
                    },
                    requireAcsItemOutDetail: function (input) {
                        return "@ViewResource.AcsItemOutDetailIsRequire";
                    },
                    takeOutDate: function (input) {
                        var minTakeOutDate = kendo.format("{0:d/M/yyyy}", getMinPlanReturnDate());
                        return kendo.format("@(MessageResource.InvalidDate)", "@Html.DisplayNameFor(m=>m.TakeOutDate)", minTakeOutDate);
                    }
                },
                validate: function () {
                    app.ui.showValidateSummary(this.errors());
                }
            }).data("kendoValidator");

            updatePurposeUIState();
            uiState.register('ajax', ['.k-button']);
        });

        $("#saveButton")
                .on("validating", function (sender, args) {
                    args.isValid = validator.validate();
                })
                .on("openDialog", function (sender, args) {
                    args.buttons.yes.action = function () {

                        // get items detail data.
                        var grid = $("#itemGrid").data("kendoGrid");
                        var itemsList = [];

                        $.each(grid.dataSource.data().toJSON(), function (index, item) {
                            itemsList.push({
                                "DetailiD": item.DetailiD, "ItemID": item.ItemID, "Seq": item.Seq, "ItemTypeID": item.ItemTypeID
                                , "ItemTypeName": item.ItemTypeName, "ItemName": item.ItemName, "Description": item.Description
                                , "Confidential": item.Confidential, "RequestItemQty": item.RequestItemQty, "PlanReturnDate": app.data.toDateString(item.PlanReturnDate)
                                , "ActualTakeOutQty": item.ActualTakeOutQty, "ActualReturnQty": item.ActualReturnQty, "ActualReturn": app.data.toDateString(item.ActualReturn)});
                        });
                        $("#AcsItemOutDetails").val(kendo.stringify(itemsList));
                        uiState.busy("save", true);
                        $("form").submit();
                    };
                });

        function purposeCodeChange(e) {
            updatePurposeUIState();
        }

        function purposeCodeDataBound(e) {
            updatePurposeUIState();
        }

        function getMinPlanReturnDate() {
            var gridId = "#itemGrid";
            var grid = $(gridId).data("kendoGrid");
            var minTakeInDate = kendo.parseDate("9999-12-31", "yyyy-MM-dd");
            var dataItems = grid.dataSource.data().toJSON();
            $.each(dataItems, function (i, dataItem) {
                if (dataItem.PlanReturnDate < minTakeInDate && dataItem.PlanReturnDate != null)
                    minTakeInDate = dataItem.PlanReturnDate;
            });
            return minTakeInDate;
        }

        function updatePurposeUIState() {
            var purpose = $("#@Html.NameFor(m => m.PurposeCodeID)").data("kendoDropDownList");

            $("[data-for=@Html.NameFor(m => m.OtherPurpose)]").hide('fast');
            var dataItem = purpose.dataItem();
            if (dataItem && dataItem.Key !== undefined) {
                if (dataItem.Key.toLowerCase() == "other") {
                    setTimeout(function () {
                        $(".other-purpose").show('fast');
                    }, 100);
                    return;
                }
            }
            $(".other-purpose").hide('fast');
        }

        function dataSourceRequestStart(e) {
            uiState.busy("ajax", true);
        }

        function dataSourceRequestEnd(e) {
            uiState.busy("ajax", false);
            //var handled = app.ui.handleDataSourceRequestEnd(e);
            if (e.type && (e.type !== "read")) {
                setTimeout(function () {
                    var grid = $("#itemGrid").data("kendoGrid");
                    grid.dataSource.read();
                }, 100);
            }
        }

        function dataSourceError(e) {
            var result = app.ui.handleDataSourceError(e);
            if (result.handled) {
                $("#edit-form-error-message").html(result.message).show();
            }
            //grid.dataSource.cancelChanges();
        }

        function gridBinding(e) {
            app.ui.initGridRowNo(this);
        }

        function gridSave(e) {

        }

        function gridEdit(e) {
            var model = e.model;
            var options = {
                create: { title: "@ViewResource.AcsItemOut_PopUpSection_Add_Title", button: { text: "@WidgetResource.Button_Add_Text" } },
                edit: { title: "@ViewResource.AcsItemOut_PopUpSection_Edit_Title", button: { text: "@WidgetResource.Button_Save_Text" } },
                cancelButton: { text: "@WidgetResource.Button_Cancel_Text" }
            };


            // validator

            var returnDatePicker = $("#PlanReturnDate").data("kendoDatePicker");
            var minDate = $("#TakeOutDate").data("kendoDatePicker");
            returnDatePicker.min(minDate.value());


            // validator


            var itemTypeDropdownlist = $("#ItemTypeID").data("kendoDropDownList");
            itemTypeDropdownlist.bind("change", function (e) {
                var dataItem = this.dataItem();
                var itemDropDownList = $("#ItemID").data("kendoDropDownList");
                if (dataItem.Value) {
                    var value = dataItem.Value;
                    itemDropDownList.dataSource.filter({ field: "ItemTypeID", operator: "eq", value: value });
                }
                else{
                    itemDropDownList.dataSource.filter({ });
                }
                itemDropDownList.select(0);
            });

            var itemDropdownlist = $("#ItemID").data("kendoDropDownList");
            itemDropdownlist.bind("change", function (e) {
                var dataItem = this.dataItem();
                if (dataItem && dataItem.ItemID !=="") {
                    $('#Confidential').prop('checked', dataItem.IsConfdt);
                    model.Confidential = dataItem.IsConfdt;

                    var value = dataItem.ItemTypeID;
                    $("#ItemTypeID").data('kendoDropDownList').value(value);
                    model.ItemTypeID = value;
                    $('div[id^="ItemTypeID"]').hide();
                    $("#ItemID").data("kendoDropDownList").dataSource.filter({ field: "ItemTypeID", operator: "eq", value: value });
                }
            });
            itemDropdownlist.bind("open", function (e) {
                var dataItem = this.dataItem();
                if (dataItem && dataItem.ItemID !== "") {

                    var value = dataItem.ItemTypeID;
                    $("#ItemTypeID").data('kendoDropDownList').value(value);
                    model.ItemTypeID = value;
                    $('div[id^="ItemTypeID"]').hide();
                    $("#ItemID").data("kendoDropDownList").dataSource.filter({ field: "ItemTypeID", operator: "eq", value: value });
                }
            });

            app.ui.initGridPopupEditor(e, options);
        }

        function gridCancel(e) {
            this.cancelChanges();
        }

        function popupEditActivate(e) {
            this.wrapper.find("input[name='ItemType']").focus();
        }

        function renderConfidential(data) {
            return data.Confidential ? "<label class=\"label label-md label-primary\">@ViewResource.Confdt_IsTrue</label>" : "<label>@ViewResource.Confdt_IsFalse</label>";
        }

        function getItemType(data) {
            //return app.data.getName(itemTypes, data);
        }

        function datePickerChange(e) {
            app.ui.handleDatePickerNullValue(this);
        }
    </script>
}