@model AcsPhotoViewModel
@using Vereyon.Web;
@{
    var currentUserName = User.Identity.Name;
    var areaApprovalFormat = ViewResource.Area + " ({0}: {1})";
    var displayArea = String.Format(areaApprovalFormat, AcsModelHelper.GetFactory(Model.Area.FactoryCode), ModelLocalizeManager.GetValue(Model.Area, "AreaDisplay"));

    var minActualReturnDate = DateTime.Today.Ticks < Model.TakePhotoDateFrom.Ticks ? DateTime.Today : Model.TakePhotoDateFrom;
    var maxActualReturnDate = DateTime.Today;
}
@Html.RenderFlashMessages()
<div class="animated fadeIn">
    @using (Html.BeginForm("Edit", "AcsPhoto", FormMethod.Post, new { @id = "request-form", @class = "form-horizontal", @novalidate = "novalidate" }))
    {
        @Html.AntiForgeryToken()
        <div class="well well-warning">
            @MessageResource.MSG0039
        </div>
        <div class="well well-sm ">
            <div class="row">
                @Html.LabelFor(m => m.ReqNo, new { @class = "col-md-2 control-label" })
                <label class="col-md-3 control-text">@Model.ReqNo</label>
                @Html.LabelFor(m => m.Status, new { @class = "col-md-2 control-label" })
                <label class="col-md-2 control-text">@Html.DisplayRequestStatusName(Model.Status)</label>
            </div>
            <div class="row">
                @Html.LabelFor(m => m.CreateBy, new { @class = "col-md-2 control-label" })
                <div class="col-md-3 control-text">
                    @Html.DisplayFor(m => m.RequestEmployeeName)
                </div>
                @Html.LabelFor(m => m.RequestEmployeeDepartmentName, new { @class = "col-md-2 control-label" })
                <div class="col-md-2 control-text">
                    @Html.DisplayFor(m => m.RequestEmployeeDepartmentName)
                </div>
                @Html.LabelFor(m => m.CreateDate, new { @class = "col-md-1 control-label" })
                <div class="col-md-2 control-text">
                    @Html.DisplayDate(Model.CreateDate)
                </div>
            </div>
            <div class="row">
                @Html.LabelFor(m => m.TakePhotoDateFrom, new { @class = "col-md-2 control-label" })
                <div class="col-md-4 control-text">
                    @Html.DisplayDate(Model.TakePhotoDateFrom.AddMinutes(Model.TakePhotoTimeFrom), "d MMM yyyy HH:mm")
                    <span>-</span>
                    @Html.DisplayDate(Model.TakePhotoDateTo.AddMinutes(Model.TakePhotoTimeTo), "d MMM yyyy HH:mm")
                </div>
            </div>
            <div class="row">
                @Html.LabelFor(m => m.PhotoByType, new { @class = "col-md-2 control-label" })
                <label class="col-md-3 control-text">@Html.DisplayPhotoType(Model.PhotoByType)</label>
                @Html.LabelFor(m => m.AreaID, new { @class = "col-md-2 control-label" })
                <label class="col-md-4 control-text">@Html.DisplayFactory(Model.Area.FactoryCode): @Html.DisplayLocalize(Model.Area, "AreaDisplay")</label>
            </div>

            @if (Model.PhotoByType == PhotoByTypes.Employee)
            {
                <div class="row">
                    @Html.LabelFor(m => m.PhotoEmpID, new { @class = "col-md-2 control-label" })
                    <label class="col-md-3 control-text">@(ModelLocalizeManager.GetValue(Model.PhotoEmployee, "EmpName"))</label>
                    @Html.LabelFor(m => m.WitnessEmpID, new { @class = "col-md-2 control-label" })
                    <label class="col-md-3 control-text">@(Model.WitnessEmployee == null ? Html.DisplayFor(m => m.WitnessEmpID) : Html.DisplayLocalize(Model.WitnessEmployee, "EmpName"))</label>
                </div>
            }
            else
            {
                <div class="row">
                    @Html.LabelFor(m => m.TakePhotoName, new { @class = "col-md-2 control-label" })
                    <label class="col-md-3 control-text">@Model.TakePhotoName</label>
                    @Html.LabelFor(m => m.WitnessEmpID, new { @class = "col-md-2 control-label" })
                    <label class="col-md-3 control-text">@(Model.WitnessEmployee == null ? Html.DisplayFor(m => m.WitnessEmpID) : Html.DisplayLocalize(Model.WitnessEmployee, "EmpName"))</label>
                </div>
            }

          

            <div class="row">
                @Html.LabelFor(m => m.TargetItem, new { @class = "col-md-2 control-label" })
                <label class="col-md-10 control-text">@Model.TargetItem</label>
            </div>
            <div class="row">
                @Html.LabelFor(m => m.PurposeCodeID, new { @class = "col-md-2 control-label" })
                <label class="col-md-3 control-text">@Html.DisplayLocalize(Model.Purpose, "MiscDisplay")</label>
                @if (!String.IsNullOrEmpty(Model.OtherPurpose))
                {
                    @Html.LabelFor(m => m.OtherPurpose, new { @class = "col-md-2 control-label" })
                    <label class="col-md-4 control-text">@Model.OtherPurpose</label>
                }
            </div>
            <div class="row">
                @Html.LabelFor(m => m.EquipItemID, new { @class = "col-md-2 control-label" })
                <label class="col-md-4 control-text">@Model.EquipItem.ItemDisplay</label>
                @if (!String.IsNullOrEmpty(Model.OtherEquip))
                {
                    @Html.LabelFor(m => m.OtherEquip, new { @class = "col-md-2 control-label outsource-field" })
                    <label class="col-md-4 control-text outsource-field">@Model.OtherEquip</label>
                }
            </div>
            @if (Model.IsLending)
            {
                <div class="row">
                    <div class="col-md-offset-2 col-md-10 control-text">
                        <i class="fa fa-check-circle"></i> @Html.LabelFor(m => m.IsLending)
                    </div>
                </div>
            }
        </div>

        if (Model.IsShowGAToReturnSection(User))
        {
            <h2><i class="fa fa-repeat"></i> @ViewResource.AcsPhoto_GASection_Title</h2>
            <div class="well well-sm form-horizontal ga-form">
                @if (Model.AllowInputGAToReturn(User))
                {
                    <div class="form-group">
                        @Html.LabelRequiredHintFor(m => m.AssetCode, new { @class = "col-md-2 control-label" })
                        <div class="col-md-3">
                            @(Html.Kendo().TextBoxFor(m => m.AssetCode).HtmlAttributes(new { style = "width:100%", maxlength = 100, data_field = Html.DisplayNameFor(m => m.AssetCode) }))
                        </div>
                        @Html.LabelRequiredHintFor(m => m.ActReturnDate, new { @class = "col-md-2 control-label" })
                        <div class="col-md-2">
                            @(Html.Kendo().DatePickerFor(m => m.ActReturnDate)
                                .Min(minActualReturnDate)
                                .Max(maxActualReturnDate)
                                .HtmlAttributes(new { })
                            )
                        </div>
                        <div class="col-md-2">
                            @Html.KendoConfirmButton("gaButton", "save", WidgetResource.Button_Save_Text, new { @class = "k-button k-primary k-ga", @data_content = MessageHelper.ConfirmSave() })
                        </div>
                    </div>

                }
                else
                {
                    <div class="row">
                        @Html.LabelFor(m => m.AssetCode, new { @class = "col-md-3 col-lg-2 control-label" })
                        <div class="col-md-2 control-text">
                            @Html.DisplayFor(m => m.AssetCode)
                        </div>
                        @Html.LabelFor(m => m.ActReturnDate, new { @class = "col-md-2 control-label" })
                        <div class="col-md-2 control-text">
                            @Html.DisplayDate(Model.ActReturnDate, "d")
                        </div>
                    </div>
                }
            </div>
        }

        <h2><i class="fa fa-list-ul"></i> @ViewResource.ApprovalSection_Title</h2>
        <div class="well well-sm form-horizontal">
            @{
                Model.ViewMode = RequestViewMode.Approval;
                Html.RenderPartial("_DisplayApproverList", Model);
            }
        </div>

                if (!String.IsNullOrEmpty(Model.Note))
                {
                    <h2><i class="fa fa-file-text-o"></i> @ViewResource.NoteSection_Title</h2>
                    <div class="well well-sm">
                        <div style="padding:5px">
                            @Html.DisplayHtmlFor(m => m.Note)
                        </div>
                    </div>
                }
                <div class="text-center">
                    <div class="button-container">
                        @if (ViewContext.Controller.HasPermission("ACS060", PermissionNames.Edit))
                {
                            @Html.KendoActionLink("editLink", "edit", WidgetResource.Button_Edit_Text, Url.Action("Edit", new { id = Model.ReqNo }), new { @class = "k-primary" })
                        }
                        @if (Model.AllowCancelRequest(User))
                {
                            @Html.KendoConfirmButton("cancelRequestButton", "times-circle", WidgetResource.Button_CancelRequest_Text, new { @class = "k-button k-button-danger k-cancel-request", data_content = MessageHelper.ConfirmCancelRequest() })
                        }

                        @if (Model.AllowForceDone(User))
                {
                            @Html.KendoConfirmButton("forceDoneButton", "check-square-o", WidgetResource.Button_ForceDone_Text, new { @class = "k-button k-force-done k-button-success", data_content = MessageHelper.ConfirmForceDone() })
                        }

                        @if (ViewContext.Controller.HasPermission("ACS060", PermissionNames.Add))
                {
                            @Html.KendoActionLink("duplicateLink", "copy", WidgetResource.Button_Duplicate_Text, Url.Action("Duplicate", new { id = Model.ReqNo }), new { @class = "k-button-warning k-duplicate" })
                        }
                    </div>
                    @Html.KendoValidationSummary()
                </div>
                }
</div>

@section scripts
    {
    <script type="text/javascript">
        var uiState = new AppUIState();
        var validator;

        $(document).ready(function () {
            app.initPage();
            uiState.register('cancelRequest', [".k-button"]);
            uiState.register('approval', [".k-button"]);
            uiState.register('ga', [".k-button"]);
            uiState.register("ajax", [".k-button"]);

            validator = $("form").kendoValidator({
                rules: {
                    requiredRejectReason: function (input) {
                        if (input.hasClass("reject-reason")) {
                            return input.val() !== "";
                        }
                        return true;
                    },
                    requiredAssetCode: function (input) {
                        if (input.is("[name='@Html.NameFor(m=>m.AssetCode)']"))
                        {
                            return $.trim(input.val()) !== "";
                        }
                        return true;
                    }
                },
                messages: {
                    requiredRejectReason: function (input) {
                        return app.ui.getRequiredMessage(input);
                    },
                    requiredAssetCode: function (input) {
                        return app.ui.getRequiredMessage(input);
                    }
                },
                validateOnBlur: false
            }).data("kendoValidator");

            $("#cancelRequestButton").on("openDialog", function (sender, args) {
                args.buttons.yes.action = function () {
                    $(".k-validation-summary").hide();
                    uiState.busy("cancelRequest", true);
                    var data = {
                        requestNo: "@Model.ReqNo"
                    };
                    $.ajax({
                        url: "@Url.Action("CancelRequest")",
                        type: "POST",
                        data: app.addAntiForgeryToken(data),
                        success: function (data, status, xhr) {
                            app.ui.handleAjaxSuccess(data, status, xhr);
                            window.location = "@Url.Action("Detail",new { id = Model.ReqNo })";
                        },
                        error: function (xhr, status, error) {
                            var message = app.ui.handleAjaxError(xhr, status, error);
                            showMessage(message);
                        },
                        complete: function () {
                            uiState.busy("cancelRequest", false);
                        }
                    });
                }
            });

             $(".k-save-approval")
                .on("validating", function (sender, args, elem) {
                    validator.hideMessages();
                    var input = $(elem).data("required-reason");
                    if (input)
                        args.isValid = validator.validateInput("#" + input);
                })
                .on("openDialog", function (sender, args,elem) {
                    args.buttons.yes.action = function () {
                    var data = {
                        approvalID: $(elem).data("approval-id"),
                        requestNo: "@Model.ReqNo",
                        approvalCode: $(elem).data("approval-code"),
                        rejectReason: $(elem).data("approval-code") =="@ApprovalCode.Reject"? $("#" + $(elem).data("required-reason")).val()||"" :""
                    };
                    $(".k-validation-summary").hide();
                    uiState.busy("approval", true);
                    $.ajax({
                        url: "@Url.Action("Approval")",
                        type: "POST",
                        data: app.addAntiForgeryToken(data),
                        success: function (data, status, xhr) {
                            app.ui.handleAjaxSuccess(data, status, xhr);
                            window.location =  "@Url.Action("Detail",new { id = Model.ReqNo })";
                        },
                        error: function (xhr, status, error) {
                            var message = app.ui.handleAjaxError(xhr, status, error);
                            showMessage(message);
                        },
                        complete: function () {
                            uiState.busy("approval", false);
                        }
                    });
                };
            });

            $("#gaButton")
                .on("validating", function (sender, args) {
                    var v = $(".ga-form").kendoValidator().data("kendoValidator");
                    args.isValid = v.validate();
                })
                .on("openDialog", function (sender, args) {
                    args.buttons.yes.action = function () {
                        var returnDate = $("#@Html.IdFor(m => m.ActReturnDate)").data("kendoDatePicker").value();
                        var data = {
                            reqNo: "@Model.ReqNo",
                            assetCode: $("#@Html.IdFor(m => m.AssetCode)").val(),
                            actReturnDate: returnDate==null ? "":returnDate.toISOString()
                        };
                        uiState.busy("ga", true);
                        $(".k-validation-summary").hide();
                        $.ajax({
                            url: "@Url.Action("UpdateGA")",
                            type: "POST",
                            data: app.addAntiForgeryToken(data),
                            success: function (data, status, xhr) {
                                app.ui.handleAjaxSuccess(data, status, xhr);
                                window.location = "@Url.Action("Detail",new { id = Model.ReqNo })";
                            },
                            error: function (xhr, status, error) {
                                var message = app.ui.handleAjaxError(xhr, status, error);
                                showMessage(message);
                            },
                            complete: function () {
                                uiState.busy("ga", false);
                            }
                        });
                };
            });

            $("#ackButton").on("openDialog", function (sender, args) {
                args.buttons.yes.action = function () {
                    $(".k-validation-summary").hide();
                    uiState.busy("ajax", true);
                    $.ajax({
                        url: "@Url.Action("Acknowledge",new { id = Model.ReqNo })",
                        type: "POST",
                        data: app.addAntiForgeryToken(),
                        success: function (data, status, xhr) {
                            app.ui.handleAjaxSuccess(data, status, xhr);
                            window.location = "@Url.Action("Detail",new { id = Model.ReqNo })";
                        },
                        error: function (xhr, status, error) {
                            var message = app.ui.handleAjaxError(xhr, status, error);
                            showMessage(message);
                        },
                        complete: function () {
                            uiState.busy("ajax", false);
                        }
                    });
                };
            });

            $("#forceDoneButton").on("openDialog", function (sender, args) {
                args.buttons.yes.action = function () {
                    $(".k-validation-summary").hide();
                    uiState.busy("ajax", true);
                    $.ajax({
                        url: "@Url.Action("ForceDone",new { id = Model.ReqNo })",
                        type: "POST",
                        data: app.addAntiForgeryToken(),
                        success: function (data, status, xhr) {
                            app.ui.handleAjaxSuccess(data, status, xhr);
                            window.location = "@Url.Action("Detail",new { id = Model.ReqNo })";
                        },
                        error: function (xhr, status, error) {
                            var message = app.ui.handleAjaxError(xhr, status, error);
                            showMessage(message);
                        },
                        complete: function () {
                            uiState.busy("ajax", false);
                        }
                    });
                }
            });
        });


        function showMessage(message) {
            $(".k-validation-summary").show().html(message);
        }

        function datePickerChange(e) {
            app.ui.handleDatePickerNullValue(this);
        }
    </script>
}
