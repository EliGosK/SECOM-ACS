@model AcsEmployeeViewModel
@using Vereyon.Web;
@{
    
}
@Html.RenderFlashMessages()
<div class="animated fadeIn">
    @using (Html.BeginForm("Edit", "AcsEmployee", FormMethod.Post, new { @id = "edit-form", @class = "form-horizontal", @novalidate = "novalidate" }))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(m => m.ReqNo)
        <div class="well well-warning">
            @MessageResource.MSG0034
        </div>
        <div class="well well-sm">
            <div class="row">
                @Html.LabelFor(m => m.ReqNo, new { @class = "col-md-2 control-label" })
                <label class="col-md-2 control-text">@Model.ReqNo</label>
                @Html.LabelFor(m => m.Status, new { @class = "col-md-2 control-label" })
                <label class="col-md-2 control-text">@Html.DisplayRequestStatusName(Model.Status)</label>
            </div>
            <div class="row">
                @Html.LabelFor(m => m.CreateBy, new { @class = "col-md-2 control-label" })
                <div class="col-md-3 control-text">
                    @Html.DisplayFor(m => m.RequestEmployeeName)
                </div>
                @Html.LabelFor(m => m.RequestEmployeeDepartmentName, new { @class = "col-md-1 control-label" })
                <div class="col-md-2 control-text">
                    @Html.DisplayFor(m => m.RequestEmployeeDepartmentName)
                </div>
                @Html.LabelFor(m => m.CreateDate, new { @class = "col-md-2 control-label" })
                <div class="col-md-2 control-text">
                    @Html.DisplayDate(Model.CreateDate)
                </div>
            </div>
            <div class="row">
                @Html.LabelFor(m => m.RequestFor, new { @class = "col-md-2 control-label" })
                <label class="col-md-4 control-text">@Html.DisplayRequestFor(Model.RequestFor)</label>
            </div>

            <div class="row">
                @Html.LabelFor(m => m.EntryDateFrom, new { @class = "col-md-2 control-label" })
                <div class="col-md-4 control-text">
                    @Html.DisplayDate(Model.EntryDateFrom.AddMinutes(Model.EntryTimeFrom), "d MMM yyyy HH:mm")
                    <span>-</span>
                    @Html.DisplayDate(Model.EntryDateTo.AddMinutes(Model.EntryTimeTo), "d MMM yyyy HH:mm")
                </div>
            </div>
            <div class="row">
                @Html.LabelFor(m => m.Areas, new { @class = "col-md-2 control-label" })
                <div class="col-md-10 control-text">
                    <ul class="list-unstyled list-inline">
                        @{
                            foreach (var areaApprover in Model.AreaApprovals.Where(t => t.AreaID.HasValue).ToList())
                            {
                                <li><label class="label label-primary label-md">@ModelLocalizeManager.GetValue(areaApprover.Area, "AreaDisplay")</label></li>
                            }
                        }
                    </ul>
                </div>
            </div>
            <div class="row">
                @Html.LabelFor(m => m.PurposeCodeID, new { @class = "col-md-2 control-label" })
                <label class="col-md-2 control-text">@Html.DisplayLocalize(Model.Purpose, "MiscDisplay")</label>
                @if (!String.IsNullOrEmpty(Model.OtherPurpose))
                {
                    @Html.LabelFor(m => m.OtherPurpose, new { @class = "col-md-1 control-label" })
                    <label class="col-md-6 control-text">@Model.OtherPurpose</label>
                }
            </div>
        </div>
    if (Model.RequestFor == RequestFors.BusinessTrip)
    {
        <h2><i class="fa fa-th-list"></i> @ViewResource.AcsEmployee_BusinessTripSection_Title</h2>
        <div class="grid-container">
            @(Html.Kendo().Grid<AcsEmployeeDetailViewModel>()
                .Name("businessTripGrid")
                .Scrollable()
                .Pageable(p => p.Refresh(true).PageSizes(true).ButtonCount(5))
                .HtmlAttributes(new { style = "height:100%;" })
                .Columns(c =>
                {
                    c.Template(f => { }).ClientTemplate("#=_rowNo#").Title(WidgetResource.Grid_Column_No).Width(60);
                    c.Bound(f => f.EmployeeName);
                    c.Bound(f => f.DepartmentName);
                })
                .DataSource(ds => ds
                    .Custom().Transport(t =>
                    {
                        t.Read(r =>
                            r.Action("ListEmployeeDetail", "AcsEmployee", new { requestNo = Model.ReqNo })
                            .Type(HttpVerbs.Post)
                        );
                    })
                    .Schema(s =>
                    {
                        s.Model(m =>
                        {
                            m.Id(f => f.DetailID);
                        });
                        s.Data("Data").Total("Total").Errors("Errors");
                    })
                    .Events(ev =>
                    {
                        ev.RequestStart("dataSourceRequestStart");
                        ev.RequestEnd("dataSourceRequestEnd");
                        ev.Error("dataSourceError");
                    })
                    .PageSize(20)
                    .ServerFiltering(true)
                    .ServerPaging(true)
                    .ServerSorting(true)
                )
                .AutoBind(true)
                .Events(ev =>
                {
                    ev.DataBinding("gridBinding");
                })
            )
        </div>
    }

    if (Model.RequestFor == RequestFors.Employee)
    {
        <h2><i class="fa fa-th-list"></i> @ViewResource.AcsEmployee_EmployeeListSection_Title</h2>
        <div class="grid-container">
            @(Html.Kendo().Grid<AcsEmployeeDetailViewModel>()
                .Name("employeeGrid")
                .Scrollable()
                .Pageable(p => p.Refresh(true).PageSizes(true).ButtonCount(5))
                .HtmlAttributes(new { style = "height:100%;" })
                .Columns(c =>
                {
                    c.Template(f => { }).ClientTemplate("#=_rowNo#").Title(WidgetResource.Grid_Column_No).Width(60);
                    c.Bound(f => f.EmployeeID);
                    c.Bound(f => f.EmployeeName);
                    c.Bound(f => f.DepartmentName);
                })
                .DataSource(ds => ds
                    .Custom().Transport(t =>
                    {
                        t.Read(r =>
                            r.Action("ListEmployeeDetail", "AcsEmployee", new { requestNo = Model.ReqNo })
                            .Type(HttpVerbs.Post)
                        );
                    })
                    .Schema(s =>
                    {
                        s.Model(m =>
                        {
                            m.Id(f => f.DetailID);
                        });
                        s.Data("Data").Total("Total").Errors("Errors");
                    })
                    .Events(ev =>
                    {
                        ev.RequestStart("dataSourceRequestStart");
                        ev.RequestEnd("dataSourceRequestEnd");
                        ev.Error("dataSourceError");
                    })
                    .PageSize(20)
                    .ServerFiltering(true)
                    .ServerPaging(true)
                    .ServerSorting(true)
                )
                .AutoBind(true)
                .Events(ev =>
                {
                    ev.DataBinding("gridBinding");
                })
                                    )
                                </div>
                            }

                            <h2><i class="fa fa-list-ul"></i> @ViewResource.ApprovalSection_Title</h2>
                            <div class="well well-sm form-horizontal">
                                @{
                                    Model.ViewMode = RequestViewMode.View;
                                    Html.RenderPartial("_DisplayApproverList", Model);
                                }
                            </div>
                            <h2><i class="fa fa-file-text-o"></i> @ViewResource.NoteSection_Title</h2>
                            <div class="well well-sm">
                                @(Html.Kendo().EditorFor(m => m.Note)
                                    .Tools(t => t.Clear()
                                          .Bold().Italic().Underline().Strikethrough()
                                          .JustifyLeft().JustifyCenter().JustifyRight().JustifyFull()
                                          .InsertUnorderedList().InsertOrderedList()
                                          .Outdent().Indent()
                                          .Formatting()
                                          .CleanFormatting()
                                    )
                                    .Value(Html.DisplayHtmlFor(m => m.Note).ToString())
                                    .HtmlAttributes(new { @class = "k-textbox", style = "width:100%", @maxlength = 4000 }))
                            </div>

                            <div class="text-center">
                                <div class="button-container">
                                    @(Html.KendoConfirmButton("saveButton", "save", WidgetResource.Button_Save_Text, new { @class = "k-primary", data_content = MessageHelper.ConfirmSave() }))
                                    <a class="k-button k-button-warning" href="@Url.Action("Detail",new { id = Model.ReqNo })"><i class="fa fa-times-circle"></i> @WidgetResource.Button_Cancel_Text</a>
                                </div>
                            </div>

                            @Html.KendoValidationSummary()
                                    }
</div>
@section scripts{
    <script type="text/javascript">
        var uiState = new AppUIState();

        $(document).ready(function (e) {
            app.initPage();
            uiState.register('grid', [".k-button"]);
            uiState.register("save", [{ elem: "#saveButton", busyContent: "<i class=\"fa fa-spin fa-spinner\"></i> @WidgetResource.Button_Busy_Text" }, ".k-button"]);

            $("#saveButton")
                .on("openDialog", function (sender, args) {
                    args.buttons.yes.action = function () {
                        uiState.busy("save", true);
                        $("form").submit();
                    };
                });
        });

        function gridBinding(e) {
            app.ui.initGridRowNo(this);
        }

        function dataSourceRequestStart(e) {
            uiState.busy('grid', true);
        }

        function dataSourceRequestEnd(e) {
            uiState.busy('grid', false);
            var handled = app.ui.handleDataSourceRequestEnd(e);
        }

        function dataSourceError(e) {
            app.ui.handleDataSourceError(e);
        }

    </script>
}
