@model AcsEmployeeViewModel
@using Vereyon.Web;
@{
    var mapImageFolder = ApplicationContext.Setting.MapImageFolder;
}
@Html.RenderFlashMessages()
<div class="animated fadeIn">
    @using (Html.BeginForm("Edit", "AcsEmployee", FormMethod.Post, new { @id = "request-form", @class = "form-horizontal", @novalidate = "novalidate" }))
    {
        @Html.AntiForgeryToken()
        <div class="well well-sm">
            <div class="row">
                @Html.LabelFor(m => m.ReqNo, new { @class = "col-md-2 control-label" })
                <label class="col-md-2 control-text">@Model.ReqNo</label>
                @Html.LabelFor(m => m.Status, new { @class = "col-md-2 control-label" })
                <label class="col-md-2 control-text">@Html.DisplayRequestStatusName(Model.Status)</label>
            </div>
            <div class="row">
                @Html.LabelFor(m => m.CreateBy, new { @class = "col-md-2 control-label" })
                <div class="col-md-3 control-text">
                    @Html.DisplayFor(m => m.RequestEmployeeName)
                </div>
                @Html.LabelFor(m => m.RequestEmployeeDepartmentName, new { @class = "col-md-1 control-label" })
                <div class="col-md-2 control-text">
                    @Html.DisplayFor(m => m.RequestEmployeeDepartmentName)
                </div>
                @Html.LabelFor(m => m.CreateDate, new { @class = "col-md-2 control-label" })
                <div class="col-md-2 control-text">
                    @Html.DisplayDate(Model.CreateDate)
                </div>
            </div>
            <div class="row">
                @Html.LabelFor(m => m.RequestFor, new { @class = "col-md-2 control-label" })
                <label class="col-md-4 control-text">@Html.DisplayRequestFor(Model.RequestFor)</label>
            </div>

            <div class="row">
                @Html.LabelFor(m => m.EntryDateFrom, new { @class = "col-md-2 control-label" })
                <div class="col-md-4 control-text">
                    @Html.DisplayDate(Model.EntryDateFrom.AddMinutes(Model.EntryTimeFrom), "d MMM yyyy HH:mm")
                    <span>-</span>
                    @Html.DisplayDate(Model.EntryDateTo.AddMinutes(Model.EntryTimeTo), "d MMM yyyy HH:mm")
                </div>
            </div>
            <div class="row">
                @Html.LabelFor(m => m.Areas, new { @class = "col-md-2 control-label" })
                <div class="col-md-10 control-text">
                    <ul class="list-unstyled list-inline">
                        @{
                            foreach (var areaApprover in Model.AreaApprovals.Where(t => t.AreaID.HasValue).ToList())
                            {
                                <li><label class="label label-primary label-md">@Html.DisplayFactory(areaApprover.Area.FactoryCode): @ModelLocalizeManager.GetValue(areaApprover.Area, "AreaDisplay")</label></li>
                            }
                        }
                    </ul>
                </div>
            </div>
            <div class="row">
                <div class="col-md-offset-2 col-md-8">
                    @Html.CommandButton("viewMapButton", "map", WidgetResource.Button_ViewMap_Text, new { @class = "k-button-info" }).Events(ev => ev.Click("viewMapClicked"))
                </div>
            </div>
            <div class="row">
                @Html.LabelFor(m => m.PurposeCodeID, new { @class = "col-md-2 control-label" })
                <label class="col-md-2 control-text">@Html.DisplayLocalize(Model.Purpose, "MiscDisplay")</label>
                @if (!String.IsNullOrEmpty(Model.OtherPurpose))
                {
                    @Html.LabelFor(m => m.OtherPurpose, new { @class = "col-md-1 control-label" })
                    <label class="col-md-6 control-text">@Model.OtherPurpose</label>
                }
            </div>
        </div>
        if (Model.RequestFor == RequestFors.BusinessTrip)
        {
            <h2><i class="fa fa-th-list"></i> @ViewResource.AcsEmployee_BusinessTripSection_Title</h2>
            <div class="grid-container">
                @(Html.Kendo().Grid<AcsEmployeeDetailViewModel>()
                    .Name("businessTripGrid")
                    .Scrollable()
                    .Pageable(p => p.Refresh(true).PageSizes(true).ButtonCount(5))
                    .HtmlAttributes(new { style = "height:100%;" })
                    .Columns(c =>
                    {
                        c.Template(f => { }).ClientTemplate("#=_rowNo#").Title(WidgetResource.Grid_Column_No).Width(60);
                        c.Bound(f => f.EmployeeName);
                        c.Bound(f => f.DepartmentName);
                    })
                    .DataSource(ds => ds
                        .Custom().Transport(t =>
                        {
                            t.Read(r =>
                                r.Action("ListEmployeeDetail", "AcsEmployee", new { requestNo = Model.ReqNo })
                                .Type(HttpVerbs.Post)
                            );
                        })
                        .Schema(s =>
                        {
                            s.Model(m =>
                            {
                                m.Id(f => f.DetailID);
                            });
                            s.Data("Data").Total("Total").Errors("Errors");
                        })
                        .Events(ev =>
                        {
                            ev.RequestStart("dataSourceRequestStart");
                            ev.RequestEnd("dataSourceRequestEnd");
                            ev.Error("dataSourceError");
                        })
                        .PageSize(20)
                        .ServerFiltering(true)
                        .ServerPaging(true)
                        .ServerSorting(true)
                    )
                    .AutoBind(true)
                    .Events(ev =>
                    {
                        ev.DataBinding("gridBinding");
                    })
                )
            </div>
        }

    if (Model.RequestFor == RequestFors.Employee)
    {
            <h2><i class="fa fa-th-list"></i> @ViewResource.AcsEmployee_EmployeeListSection_Title</h2>
            <div class="grid-container">
                @(Html.Kendo().Grid<AcsEmployeeDetailViewModel>()
        .Name("employeeGrid")
        .Scrollable()
        .Pageable(p => p.Refresh(true).PageSizes(true).ButtonCount(5))
        .HtmlAttributes(new { style = "height:100%;" })
        .Columns(c =>
        {
            c.Template(f => { }).ClientTemplate("#=_rowNo#").Title(WidgetResource.Grid_Column_No).Width(60);
            c.Bound(f => f.EmployeeID);
            c.Bound(f => f.EmployeeName);
            c.Bound(f => f.DepartmentName);
        })
        .DataSource(ds => ds
            .Custom().Transport(t =>
            {
                t.Read(r =>
                    r.Action("ListEmployeeDetail", "AcsEmployee", new { requestNo = Model.ReqNo })
                    .Type(HttpVerbs.Post)
                );
            })
            .Schema(s =>
            {
                s.Model(m =>
                {
                    m.Id(f => f.DetailID);
                });
                s.Data("Data").Total("Total").Errors("Errors");
            })
            .Events(ev =>
            {
                ev.RequestStart("dataSourceRequestStart");
                ev.RequestEnd("dataSourceRequestEnd");
                ev.Error("dataSourceError");
            })
            .PageSize(20)
            .ServerFiltering(true)
            .ServerPaging(true)
            .ServerSorting(true)
        )
        .AutoBind(true)
        .Events(ev =>
        {
            ev.DataBinding("gridBinding");
        })
                )
            </div>
                            }

        <h2><i class="fa fa-list-ul"></i> @ViewResource.ApprovalSection_Title</h2>
        <div class="well well-sm form-horizontal">
            @{
                Model.ViewMode = RequestViewMode.Approval;
                Html.RenderPartial("_DisplayApproverList", Model);
            }        
        </div>
            if (!String.IsNullOrEmpty(Model.Note))
            {
        <h2><i class="fa fa-file-text-o"></i> @ViewResource.NoteSection_Title</h2>
        <div class="well well-sm">
            <div style="padding:5px">
                @Html.DisplayHtmlFor(m=>m.Note)
            </div>
        </div>
            }

        <div class="text-center">
            <div class="button-container">
                @if (ViewContext.Controller.HasPermission("ACS020", PermissionNames.Edit))
                {
                    @Html.KendoActionLink("editLink", "edit", WidgetResource.Button_Edit_Text, Url.Action("Edit", new { id = Model.ReqNo }), new { @class = "k-primary" })
                }

                @if (Model.AllowCancelRequest(User))
                {
                    @Html.KendoConfirmButton("cancelRequestButton", "times-circle", WidgetResource.Button_CancelRequest_Text, new { @class = "k-button-danger k-cancel-request", data_content = MessageHelper.ConfirmCancelRequest() })
                }

                @if (ViewContext.Controller.HasPermission("ACS020", PermissionNames.Add))
                {
                    @Html.KendoActionLink("duplicateLink", "copy", WidgetResource.Button_Duplicate_Text, Url.Action("Duplicate", new { id = Model.ReqNo }), new { @class = "k-button-warning k-duplicate", target = "_blank" })
                }
            </div>
        </div>
    }
</div>
@Html.KendoValidationSummary()
<div id="mapWindow">
    @Html.UniteGallery("gallery", mapImageFolder)
</div>

@section styles
{
    @Styles.Render("~/assets/libs/unite-gallery/css/unite-gallery.css")
    @Styles.Render("~/assets/libs/unite-gallery/themes/default/ug-theme-default.css")
    @Styles.Render("~/assets/libs/unite-gallery/skins/alexis/alexis.css")
}
@section scripts{
@Scripts.Render("~/assets/libs/unite-gallery/js/unitegallery.js")
@Scripts.Render("~/assets/libs/unite-gallery/themes/default/ug-theme-default.js")
    <script type="text/javascript">
        var uiState = new AppUIState();
        var validator;

        $(document).ready(function (e) {
            app.initPage();
            uiState.register('grid', [".k-button"]);
            uiState.register('cancelRequest', [".k-button", { elem: "#cancelRequestButton", busyContent: "<i class=\"fa fa-spin fa-spinner\"></i>" }]);
            uiState.register('approval', [".k-button"]);

            validator = $("form").kendoValidator({
                rules: {
                    requiredRejectReason: function (input) {
                        if (input.hasClass("reject-reason")) {
                            return input.val() !== "";
                        }
                        return true;
                    }
                },
                messages: {
                    requiredRejectReason: function (input) {
                        return app.ui.getRequiredMessage(input);
                    }
                },
                validateOnBlur: false
            }).data("kendoValidator");

             $("#gallery").unitegallery({
                gallery_skin: "alexis",
                gallery_width: 800,
                gallery_height: 600,
                gallery_autoplay: true,
                theme_enable_fullscreen_button: false,
                theme_enable_play_button: false,
                theme_enable_hidepanel_button: false,
                theme_enable_text_panel: true,
            });

            $("#mapWindow").kendoWindow({
                visible: false,
                modal: true,
                title: "@ViewResource.Map_Title",
                width: 820,
                height: 620,
                resizable: false,
                scrollable: false,
                pinned: true,
                actions: [
                    "Close"
                ]
            });
            $("#cancelRequestButton").on("openDialog", function (sender, args) {
                args.buttons.yes.action = function ()
                {
                    $(".k-validation-summary").hide();
                    uiState.busy('cancelRequest', true);
                    $.ajax({
                        url: "@Url.Action("CancelRequest")",
                        type: "POST",
                        data: app.addAntiForgeryToken({ requestNo: "@Model.ReqNo" }),
                        success: function (data, status, xhr) {
                            app.ui.handleAjaxSuccess(data, status, xhr);
                            window.location = "@Url.Action("Detail",new { id = Model.ReqNo })";
                        },
                        error: function (xhr,status,error) {
                            var message = app.ui.handleAjaxError(xhr, status, error);
                            showMessage(message);
                        },
                        complete: function () {
                            uiState.busy('cancelRequest', false);
                        }
                    });
                };
            });

            $(".k-save-approval")
                .on("validating", function (sender, args, elem) {
                    validator.hideMessages();
                    var input = $(elem).data("required-reason");
                    if (input)
                        args.isValid = validator.validateInput("#" + input);
                })
                .on("openDialog", function (sender, args,elem) {
                    args.buttons.yes.action = function () {
                    var data = {
                        approvalID: $(elem).data("approval-id"),
                        requestNo: "@Model.ReqNo",
                        approvalCode: $(elem).data("approval-code"),
                        rejectReason: $(elem).data("approval-code") =="@ApprovalCode.Reject"? $("#" + $(elem).data("required-reason")).val()||"" :""
                    };
                    $(".k-validation-summary").hide();
                    uiState.busy("approval", true);
                    $.ajax({
                        url: "@Url.Action("Approval")",
                        type: "POST",
                        data: app.addAntiForgeryToken(data),
                        success: function (data, status, xhr) {
                            app.ui.handleAjaxSuccess(data, status, xhr);
                            window.location =  "@Url.Action("Detail",new { id = Model.ReqNo })";
                        },
                        error: function (xhr, status, error) {
                            var message = app.ui.handleAjaxError(xhr, status, error);
                            showMessage(message);
                        },
                        complete: function () {
                            uiState.busy("approval", false);
                        }
                    });
                };
            });
        });

        function showMessage(message) {
            $(".k-validation-summary").show().html(message);
        }

        function gridBinding(e) {
            app.ui.initGridRowNo(this);
        }

        function dataSourceRequestStart(e) {
            uiState.busy('grid', true);
        }

        function dataSourceRequestEnd(e) {
            uiState.busy('grid', false);
            var handled = app.ui.handleDataSourceRequestEnd(e);
        }


        function dataSourceError(e) {
            app.ui.handleDataSourceError(e);
        }

        function showMessage(message) {
            $(".k-validation-summary").show().html(message);
        }

        function viewMapClicked(e) {
            e.preventDefault();
            var w = $("#mapWindow").data("kendoWindow");
            w.open().center()
        }
    </script>
}
