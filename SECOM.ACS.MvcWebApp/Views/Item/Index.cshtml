@{
    var allowEdit = ViewContext.Controller.HasPermission("MAS020", PermissionNames.Edit);
    var allowDelete = ViewContext.Controller.HasPermission("MAS020", PermissionNames.Delete);
    var columnWidth =  (allowEdit ? 40 : 0) + (allowDelete ? 40 : 0);
}
<div class="select-type">
    <div class="form-horizontal well well-sm">
        <div class="form-group">
            <label class="control-label col-md-2 ">@(Html.DisplayName<ItemDataViewModel>("ItemTypeID"))</label>
            <div class="col-md-4">
                @(Html.Kendo().DropDownList().Name("itemType")
                    .DataSource(ds=>ds.Read(r=>r.Url("/api/miscs/list/itm")))
                    .DataTextField("Name")
                    .DataValueField("Value")
                    .OptionLabel(WidgetResource.AllOptions)
                    .HtmlAttributes(new { style = "width:100%" })
                )
            </div>
            <label class="control-label col-md-2">@(Html.DisplayName<ItemDataViewModel>("RequestType"))</label>
            <div class="col-md-4">
                @(Html.Kendo().MultiSelect().Name("requestType")
                    .DataSource(ds=>ds.Read(r=>r.Url("/api/systemmiscs/list/RequestType")))
                    .DataTextField("Name")
                    .DataValueField("Value")
                    .AutoClose(false)
                    .Placeholder(WidgetResource.AllOptions)
                    .HtmlAttributes(new { style = "width:100%" })
                )
            </div>
        </div>
        <div class="form-group">
            <label class="control-label col-md-2">@ViewResource.Item_SearchSection_ItemName</label>
            <div class="col-md-4">
                @(Html.Kendo().TextBox().Name("itemName").HtmlAttributes(new { maxlength = "50", style = "width:100%" ,})
                    )
            </div>

            <label class="control-label col-md-2">@ViewResource.Item_SearchSection_Status</label>
            <div class="col-md-4">
                @(Html.Kendo().MultiSelect()
                    .Name("status")
                    .BindTo(AcsModelHelper.GetItemStatus())
                    .DataTextField("Name")
                    .DataValueField("Value")
                    .Placeholder(WidgetResource.AllOptions)
                    .AutoClose(false)
                    .HtmlAttributes(new { @style = "width:100%" })
                )
            </div>
        </div>
        <div class="row">
            <div class="col-md-offset-2 col-md-10">
                <div class="button-container">
                    @Html.SearchButton(htmlAttributes: new { @class = "k-primary k-search" })
                    @Html.ClearButton(htmlAttributes: new { @class = "k-button-warning k-clear" })
                </div>
            </div>
        </div>
    </div>
</div>
<div class="grid-container">
    @(Html.Kendo().Grid<ItemDataViewModel>()
        .Name("grid")
            .Scrollable()
            .Pageable(p => p
                .PageSizes(true)
                .Refresh(true)
                .ButtonCount(5)
            )
            .HtmlAttributes(new { style = "height:500px" })
            .Editable(e => e.Mode(GridEditMode.PopUp)
                .TemplateName("ItemEditor")
                .Window(w => w.Width(600)
                .Events(ev => ev.Activate("popupEditActivate")))
            )
            .ToolBar(t => {
                if (this.Context.HasPermission("MAS020", PermissionNames.Add))
                {
                    t.Template(Html.GridAddButton().ToHtmlString());
                }
            } )
            .Columns(c =>
            {
                c.Template(t => { })
                    .Width(columnWidth)
                    .ClientTemplate("#=renderActionButton(data)#")
                    .Visible(allowEdit || allowDelete);
                c.Template(t => { })
                    .Width(60)
                    .HtmlAttributes(new { @class = "text-right" })
                    .ClientTemplate("#=_rowNo#").Title(WidgetResource.Grid_Column_No);
                c.Bound(f => f.ItemTypeID)
                    .ClientTemplate("#=data.MiscDisplay#")
                    .Width(100);
                c.Bound(f => f.ItemName)
                   .Width(120);
                c.Bound(f => f.ItemDisplayEN)
                    .Width(160);
                c.Bound(f => f.ItemDisplayTH)
                    .Width(160);
                c.Bound(f => f.RequestType)
                    .Width(200)
                    .ClientTemplate("#=renderRequestType(data)#");
                c.Bound(f => f.IsConfdt)
                    .Width(100)
                    .HtmlAttributes(new { @class = "text-center" })
                    .ClientTemplate("#=renderConfidential(data)#");
                c.Bound(f => f.Status)
                    .Width(60)
                    .HtmlAttributes(new { @class = "text-center" })
                    .ClientTemplate("#=renderStatus(data)#");
            })

            .DataSource(ds => ds
                .Custom().Transport(t =>
                {
                    t.Read(r => r.Action("List", "Item")
                        .Type(HttpVerbs.Post)
                        .Data("getSearchCriteria")
                        .DataType("json"));
                    t.Update(r => r.Action("Update", "Item")
                        .DataType("json")
                        .Type(HttpVerbs.Post));
                    t.Destroy(r => r.Action("Delete", "Item")
                         .DataType("json")
                         .Type(HttpVerbs.Post));
                    t.Create(r => r.Action("Create", "Item")
                        .DataType("json")
                        .Type(HttpVerbs.Post));

                }

            )
    .Schema(s =>
    {
        s.Data("Data");
        s.Total("Total");
        s.Errors("Errors");
        s.Model(m =>
        {
            m.Id(f => f.ItemID);
            m.Field(f => f.ItemName);
            m.Field(f => f.ItemDisplayEN);
            m.Field(f => f.ItemDisplayTH);
            m.Field(f => f.Description);
            m.Field(f => f.IsConfdt);
            m.Field(f => f.Status).DefaultValue("1");
        });
    })
    .PageSize(20)
    .ServerFiltering(true)
    .ServerPaging(true)
    .ServerSorting(true)
    .Events(e =>
    {
        e.RequestStart("dataSourceRequestStart");
        e.RequestEnd("dataSourceRequestEnd");
        e.Error("dataSourceError");
    })
    )
    .Events(ev => { ev.Edit("gridEdit"); ev.DataBinding("gridBinding"); })

    )
</div>


@section scripts{
    <script type="text/javascript">
        var uiState = new AppUIState();
        var requestTypes = @Html.JsonSystemMisc("RequestType");
        var grid;

        $(document).ready(function (e) {
            uiState.register("search", [".k-button"]);
            uiState.register('ajax', ['.k-button']);

            grid = $("#grid").data("kendoGrid");

            $(".k-search").on("click", function (e) {
                e.preventDefault();
                grid.dataSource.page(1);
            });

            $(".k-clear").on("click", function (e) {
                e.preventDefault();
                app.ui.clear(["#grid", "#requestType", "#itemType", "#itemName", "#status"]);
                //app.ui.clear(["#requestType", "#itemType", "#itemName", "#status"]); // status not clear
                //$('input[name="status"]').prop('checked', false); // clear rdo button
                document.getElementById("rdoAll").checked = true; // check all button after clear but clear grid
                //grid.dataSource.data([]);
            });
        });

        function dataSourceRequestStart(e) {
            uiState.busy("ajax", true);

        }

        function dataSourceRequestEnd(e) {
            uiState.busy("ajax", false);
            app.ui.handleDataSourceRequestEnd(e);
            app.ui.handleGridDataSourceRequestEnd(e, grid);
        }

        function dataSourceError(e) {
            this.cancelChanges();
            var result = app.ui.handleDataSourceError(e);
            if (result.handled) {
                $(".k-edit-form-error-message").html(result.message).show();
            }
            //grid.dataSource.cancelChanges();
        }

        function gridEdit(e) {
            var options = {
                create: { title: "@(ViewResource.Item_PopUpSection_Add_Title)", button: { text: "@WidgetResource.Button_Add_Text" } },
                edit: { title: "@(ViewResource.Item_PopUpSection_Edit_Title)", button: { text: "@WidgetResource.Button_Update_Text" }  },
                cancelButton: { text: "@WidgetResource.Button_Cancel_Text" }
            };
            if (!e.model.isNew())
            {
                e.container.find("#ItemName").attr("readonly", "readonly");

                //e.container.find("#ItemType").attr("readonly", "readonly");
                e.container.find("#ItemTypeID").data("kendoDropDownList").enable(false);
            }
            if(e.model.isNew() == true){
                e.container.find("#ItemID").attr("display","none");
            }
            e.container.find(".k-edit-form-error-message").empty().hide();
            app.ui.initGridPopupEditor(e, options);
        }

        function popupEditActivate(e) {
            this.wrapper.find("input[name='Name']").focus();

        }

        function getSearchCriteria() {
            return {
                criteria: {
                    ItemName: $("#itemName").val(),
                    RequestType: $("#requestType").data("kendoMultiSelect").value(),
                    ItemType: $("#itemType").data("kendoDropDownList").value(),
                    Status: $("#status").data("kendoMultiSelect").value()
                }
            };
        }

        function gridBinding(e) {
            app.ui.initGridRowNo(this);
        }

        function searchButtonClicked(e) {
            e.preventDefault();
            grid.dataSource.page(1);
        }


        function renderRequestType(data) {
            var values = [];
            if (data.IsItemOut) { values.push("@AcsRequestTypes.ItemOut"); }
            if (data.IsItemIn) { values.push("@AcsRequestTypes.ItemIn"); }
            if (data.IsPhoto) { values.push("@AcsRequestTypes.Photographing"); }

            var names = [];
            $.each(values, function (index, item) {
                names.push(app.data.getName(requestTypes, item));
            });
            return names.join(", ");
        }

         function renderActionButton(data) {
            var html = '';
            @if (allowEdit)
            {
                <text>html += '@Html.Raw(Html.GridEditButton().ToHtmlString())';</text>
            }

            @if (allowDelete)
            {
                <text>html += '@Html.Raw(Html.GridDeleteButton().ToHtmlString())';</text>
            }
             return html;
        }

        function renderStatus(data)
        {
            switch (data.Status)
            {
                case "1":
                    return "<label class=\"label label-md label-primary\">@ModelMetadataResource.ItemStatus_Active</label>";
                case "0":
                    return "<label class=\"label label-md label-default\">@ModelMetadataResource.ItemStatus_Inactive</label>";
                default:
                    return data.Status;
            }
        }

        function renderConfidential(data)
        {
            return data.IsConfdt? "<label class=\"label label-md label-danger\">@ViewResource.Confdt_IsTrue</label>": "@ViewResource.Confdt_IsFalse";
        }
    </script>

}