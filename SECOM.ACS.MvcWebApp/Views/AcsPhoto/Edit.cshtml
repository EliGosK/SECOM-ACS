@model AcsPhotoViewModel
@using Vereyon.Web;
@{
    var currentUserName = User.Identity.Name;
    var defaultActualReturnDateString = DateTime.Now.ToString();
    var areaApprovalFormat = ViewResource.Area + " ({0}: {1})";
    var displayArea = String.Format(areaApprovalFormat, AcsModelHelper.GetFactory(Model.Area.FactoryCode), ModelLocalizeManager.GetValue(Model.Area, "AreaDisplay"));
}
@Html.RenderFlashMessages()
<div class="animated fadeIn">
    @using (Html.BeginForm("Edit", "AcsPhoto", FormMethod.Post, new { @id = "edit-form", @class = "form-horizontal", @novalidate = "novalidate" }))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(m => m.ReqNo)
        <div class="well well-warning">
            @MessageResource.MSG0038
        </div>
        <div class="well well-sm ">
            <div class="row">
                @Html.LabelFor(m => m.ReqNo, new { @class = "col-md-2 control-label" })
                <label class="col-md-3 control-text">@Model.ReqNo</label>
                @Html.LabelFor(m => m.Status, new { @class = "col-md-2 control-label" })
                <label class="col-md-2 control-text">@Html.DisplayRequestStatusName(Model.Status)</label>
            </div>
            <div class="row">
                @Html.LabelFor(m => m.CreateBy, new { @class = "col-md-2 control-label" })
                <div class="col-md-3 control-text">
                    @Html.DisplayFor(m => m.RequestEmployeeName)
                </div>
                @Html.LabelFor(m => m.RequestEmployeeDepartmentName, new { @class = "col-md-2 control-label" })
                <div class="col-md-1 control-text">
                    @Html.DisplayFor(m => m.RequestEmployeeDepartmentName)
                </div>
                @Html.LabelFor(m => m.CreateDate, new { @class = "col-md-2 control-label" })
                <div class="col-md-2 control-text">
                    @Html.DisplayDate(Model.CreateDate)
                </div>
            </div>
            <div class="row">
                @Html.LabelFor(m => m.TakePhotoDateFrom, new { @class = "col-md-2 control-label" })
                <div class="col-md-4 control-text">
                    @Html.DisplayDate(Model.TakePhotoDateFrom.AddMinutes(Model.TakePhotoTimeFrom), "d MMM yyyy HH:mm")
                    <span>-</span>
                    @Html.DisplayDate(Model.TakePhotoDateTo.AddMinutes(Model.TakePhotoTimeTo), "d MMM yyyy HH:mm")
                </div>
            </div>
            <div class="row">
                @Html.LabelFor(m => m.PhotoByType, new { @class = "col-md-2 control-label" })
                <label class="col-md-3 control-text">@Html.DisplayPhotoType(Model.PhotoByType)</label>
                @Html.LabelFor(m => m.AreaID, new { @class = "col-md-2 control-label" })
                <label class="col-md-4 control-text">@Html.DisplayFactory(Model.Area.FactoryCode): @Html.DisplayLocalize(Model.Area, "AreaDisplay")</label>
            </div>
            @if (Model.PhotoByType == PhotoByTypes.Employee)
            {
                <div class="row">
                    @Html.LabelFor(m => m.PhotoEmpID, new { @class = "col-md-2 control-label" })
                    <label class="col-md-3 control-text">@(ModelLocalizeManager.GetValue(Model.PhotoEmployee, "EmpName"))</label>
                    
                    @Html.LabelFor(m => m.WitnessEmpID, new { @class = "col-md-2 control-label" })
                    <label class="col-md-3 control-text">@(Model.WitnessEmployee==null? Html.DisplayFor(m=>m.WitnessEmpID) : Html.DisplayLocalize(Model.WitnessEmployee, "EmpName"))</label>
                </div>
            }
            else
            {
                <div class="row">
                    @Html.LabelFor(m => m.TakePhotoName, new { @class = "col-md-2 control-label" })
                    <label class="col-md-3 control-text">@Model.TakePhotoName</label>
                    @Html.LabelFor(m => m.WitnessEmpID, new { @class = "col-md-2 control-label" })
                    <label class="col-md-3 control-text">@(Model.WitnessEmployee == null ? Html.DisplayFor(m => m.WitnessEmpID) : Html.DisplayLocalize(Model.WitnessEmployee, "EmpName"))</label>
                </div>
            }
          
            <div class="row">
                @Html.LabelFor(m => m.TargetItem, new { @class = "col-md-2 control-label" })
                <label class="col-md-10 control-text">@Model.TargetItem</label>
            </div>
            <div class="row">
                @Html.LabelFor(m => m.PurposeCodeID, new { @class = "col-md-2 control-label" })
                <label class="col-md-3 control-text">@Html.DisplayLocalize(Model.Purpose, "MiscDisplay")</label>
                @if (!String.IsNullOrEmpty(Model.OtherPurpose))
                {
                    @Html.LabelFor(m => m.OtherPurpose, new { @class = "col-md-2 control-label" })
                    <label class="col-md-4 control-text">@Model.OtherPurpose</label>
                }
            </div>
            <div class="row">
                @Html.LabelFor(m => m.EquipItemID, new { @class = "col-md-2 control-label" })
                <label class="col-md-4 control-text">@Model.EquipItem.ItemDisplay</label>
                @if (!String.IsNullOrEmpty(Model.OtherEquip))
                {
                    @Html.LabelFor(m => m.OtherEquip, new { @class = "col-md-2 control-label outsource-field" })
                    <label class="col-md-4 control-text outsource-field">@Model.OtherEquip</label>
                }
            </div>
            @if (Model.IsLending)
            {
                <div class="row">
                    <div class="col-md-offset-2 col-md-10 control-text">
                        <i class="fa fa-check-circle"></i> @Html.LabelFor(m => m.IsLending)
                    </div>
                </div>
            }
        </div>

        if (Model.IsShowGAToReturnSection(User))
        {
            <h2><i class="fa fa-repeat"></i> @ViewResource.AcsPhoto_GASection_Title</h2>
            <div class="well well-sm form-horizontal">
                <div class="row">
                    @Html.LabelFor(m => m.AssetCode, new { @class = "col-md-3 col-lg-2 control-label" })
                    <div class="col-md-2 control-text">
                        @Html.DisplayFor(m => m.AssetCode)
                    </div>
                    @Html.LabelFor(m => m.ActReturnDate, new { @class = "col-md-2 control-label" })
                    <div class="col-md-2 control-text">
                        @Html.DisplayDate(Model.ActReturnDate)
                    </div>
                </div>
            </div>
        }

        <h2><i class="fa fa-list-ul"></i> @ViewResource.ApprovalSection_Title</h2>
        <div class="well well-sm form-horizontal">
            @{
                Model.ViewMode = RequestViewMode.View;
                Html.RenderPartial("_DisplayApproverList", Model);
            }
        </div>
        <h2><i class="fa fa-file-text-o"></i> @ViewResource.NoteSection_Title</h2>
        <div class="well well-sm">
            @(Html.Kendo().EditorFor(m => m.Note)
                .Tools(t => t.Clear()
                      .Bold().Italic().Underline().Strikethrough()
                      .JustifyLeft().JustifyCenter().JustifyRight().JustifyFull()
                      .InsertUnorderedList().InsertOrderedList()
                      .Outdent().Indent()
                      .Formatting()
                      .CleanFormatting()
                )
                .Value(Html.DisplayHtmlFor(m => m.Note).ToString())
                .HtmlAttributes(new { @class = "k-textbox", style = "width:100%", @maxlength = 4000 })
            )
        </div>

        <div class="text-center">
            <div class="button-container">
                @(Html.KendoConfirmButton("saveButton", "save", WidgetResource.Button_Save_Text, new { @class = "k-primary", data_content = MessageHelper.ConfirmSave() }))
                <a class="k-button k-button-warning" href="@Url.Action("Detail", new { id = Model.ReqNo })"><i class="fa fa-times-circle"></i> @WidgetResource.Button_Cancel_Text</a>
                @if (Model.AllowCancelRequest(User))
                {
                    @Html.KendoConfirmButton("cancelRequestButton", "times-circle", WidgetResource.Button_CancelRequest_Text, new { @class = "k-button k-button-danger k-cancel-request", data_content = MessageHelper.ConfirmCancelRequest() })
                }
                @if (Model.AllowForceDone(User))
                {
                    @Html.KendoConfirmButton("forceDoneButton", "check-square-o", WidgetResource.Button_ForceDone_Text, new { @class = "k-button k-force-done k-button-success", data_content = MessageHelper.ConfirmForceDone() })
                }
            </div>
        </div>
        @Html.KendoValidationSummary()
                }
</div>

@section scripts{
    <script type="text/javascript">
        var uiState = new AppUIState();

        $(document).ready(function () {
            app.initPage();
            uiState.register("ajax", [".k-button"]);
            uiState.register("save", [{ elem: "#saveButton", busyContent: "<i class=\"fa fa-spin fa-spinner\"></i> @WidgetResource.Button_Busy_Text" }, ".k-button"]);

            $("#saveButton")
                .on("openDialog", function (sender, args) {
                    args.buttons.yes.action = function () {
                        uiState.busy("save", true);
                        $("form").submit();
                    };
                });

            $("#forceDoneButton").on("openDialog", function (sender, args) {
                args.buttons.yes.action = function () {
                    $(".k-validation-summary").hide();
                    uiState.busy("ajax", true);
                    var data = {
                            reqNo: "@Model.ReqNo",
                            note: $("#@Html.IdFor(m=>m.Note)").val()
                        }
                    $.ajax({
                        url: "@Url.Action("ForceDoneFromEdit")",
                        type: "POST",
                        data: app.addAntiForgeryToken(data),
                        success: function (data, status, xhr) {
                            app.ui.handleAjaxSuccess(data, status, xhr);
                            window.location = "@Url.Action("Detail",new { id = Model.ReqNo })";
                        },
                        error: function (xhr, status, error) {
                            var message = app.ui.handleAjaxError(xhr, status, error);
                            showMessage(message);
                        },
                        complete: function () {
                            uiState.busy("ajax", false);
                        }
                    });
                }
            });
        });

        function datePickerChange(e) {
            app.ui.handleDatePickerNullValue(this);
        }
    </script>
}
