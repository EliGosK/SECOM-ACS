//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SECOM.ACS.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ACSContext : DbContext
    {
        public ACSContext()
            : base("name=ACSContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AreaApprover> AreaApprovers { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Gate> Gates { get; set; }
        public virtual DbSet<Item> Items { get; set; }
        public virtual DbSet<Misc> Miscs { get; set; }
        public virtual DbSet<AcsItemInDetail> AcsItemInDetails { get; set; }
        public virtual DbSet<AcsItemOutDetail> AcsItemOutDetails { get; set; }
        public virtual DbSet<AcsVisitorDetail> AcsVisitorDetails { get; set; }
        public virtual DbSet<ReqAreaMapping> ReqAreaMappings { get; set; }
        public virtual DbSet<PermissionMapping> PermissionMappings { get; set; }
        public virtual DbSet<TransactionAcs> TransactionAcs { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Position> Positions { get; set; }
        public virtual DbSet<AcsItemOut> AcsItemOuts { get; set; }
        public virtual DbSet<AcsPhoto> AcsPhotoes { get; set; }
        public virtual DbSet<AcsVisitor> AcsVisitors { get; set; }
        public virtual DbSet<ReqApproverList> ReqApproverLists { get; set; }
        public virtual DbSet<AcsVIP> AcsVIPs { get; set; }
        public virtual DbSet<AcsEmployee> AcsEmployees { get; set; }
        public virtual DbSet<AcsItemIn> AcsItemIns { get; set; }
        public virtual DbSet<Card> Cards { get; set; }
        public virtual DbSet<Area> Areas { get; set; }
        public virtual DbSet<AreaCardMapping> AreaCardMappings { get; set; }
        public virtual DbSet<AcsEmployeeDetail> AcsEmployeeDetails { get; set; }
        public virtual DbSet<SystemMisc> SystemMiscs { get; set; }
        public virtual DbSet<AcsTask> AcsTasks { get; set; }
        public virtual DbSet<AreaOrganizeMapping> AreaOrganizeMappings { get; set; }
    
        public virtual ObjectResult<Misc> GetMiscsByCriteria(string miscType, Nullable<int> isActive)
        {
            var miscTypeParameter = miscType != null ?
                new ObjectParameter("MiscType", miscType) :
                new ObjectParameter("MiscType", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Misc>("GetMiscsByCriteria", miscTypeParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<Misc> GetMiscsByCriteria(string miscType, Nullable<int> isActive, MergeOption mergeOption)
        {
            var miscTypeParameter = miscType != null ?
                new ObjectParameter("MiscType", miscType) :
                new ObjectParameter("MiscType", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Misc>("GetMiscsByCriteria", mergeOption, miscTypeParameter, isActiveParameter);
        }
    
        public virtual int DeleteMisc(Nullable<int> miscID)
        {
            var miscIDParameter = miscID.HasValue ?
                new ObjectParameter("MiscID", miscID) :
                new ObjectParameter("MiscID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteMisc", miscIDParameter);
        }
    
        public virtual int UpdateMisc(Nullable<int> miscID, string miscType, string miscName, string miscDisplayEN, string miscDisplayTH, string miscRemark, Nullable<bool> isActive, Nullable<bool> deleteAble, string updateBy)
        {
            var miscIDParameter = miscID.HasValue ?
                new ObjectParameter("MiscID", miscID) :
                new ObjectParameter("MiscID", typeof(int));
    
            var miscTypeParameter = miscType != null ?
                new ObjectParameter("MiscType", miscType) :
                new ObjectParameter("MiscType", typeof(string));
    
            var miscNameParameter = miscName != null ?
                new ObjectParameter("MiscName", miscName) :
                new ObjectParameter("MiscName", typeof(string));
    
            var miscDisplayENParameter = miscDisplayEN != null ?
                new ObjectParameter("MiscDisplayEN", miscDisplayEN) :
                new ObjectParameter("MiscDisplayEN", typeof(string));
    
            var miscDisplayTHParameter = miscDisplayTH != null ?
                new ObjectParameter("MiscDisplayTH", miscDisplayTH) :
                new ObjectParameter("MiscDisplayTH", typeof(string));
    
            var miscRemarkParameter = miscRemark != null ?
                new ObjectParameter("MiscRemark", miscRemark) :
                new ObjectParameter("MiscRemark", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var deleteAbleParameter = deleteAble.HasValue ?
                new ObjectParameter("DeleteAble", deleteAble) :
                new ObjectParameter("DeleteAble", typeof(bool));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateMisc", miscIDParameter, miscTypeParameter, miscNameParameter, miscDisplayENParameter, miscDisplayTHParameter, miscRemarkParameter, isActiveParameter, deleteAbleParameter, updateByParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertMisc(string miscType, string miscName, string miscDisplayEN, string miscDisplayTH, string miscRemark, Nullable<bool> isActive, Nullable<bool> deleteAble, string createBy)
        {
            var miscTypeParameter = miscType != null ?
                new ObjectParameter("MiscType", miscType) :
                new ObjectParameter("MiscType", typeof(string));
    
            var miscNameParameter = miscName != null ?
                new ObjectParameter("MiscName", miscName) :
                new ObjectParameter("MiscName", typeof(string));
    
            var miscDisplayENParameter = miscDisplayEN != null ?
                new ObjectParameter("MiscDisplayEN", miscDisplayEN) :
                new ObjectParameter("MiscDisplayEN", typeof(string));
    
            var miscDisplayTHParameter = miscDisplayTH != null ?
                new ObjectParameter("MiscDisplayTH", miscDisplayTH) :
                new ObjectParameter("MiscDisplayTH", typeof(string));
    
            var miscRemarkParameter = miscRemark != null ?
                new ObjectParameter("MiscRemark", miscRemark) :
                new ObjectParameter("MiscRemark", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var deleteAbleParameter = deleteAble.HasValue ?
                new ObjectParameter("DeleteAble", deleteAble) :
                new ObjectParameter("DeleteAble", typeof(bool));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertMisc", miscTypeParameter, miscNameParameter, miscDisplayENParameter, miscDisplayTHParameter, miscRemarkParameter, isActiveParameter, deleteAbleParameter, createByParameter);
        }
    
        public virtual int DeleteItem(Nullable<int> itemID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteItem", itemIDParameter);
        }
    
        public virtual ObjectResult<ItemDataView> GetItemDataViewsByCriteria(string itemName, string itemType, string status, Nullable<bool> isItemIn, Nullable<bool> isItemOut, Nullable<bool> isPhoto)
        {
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var itemTypeParameter = itemType != null ?
                new ObjectParameter("ItemType", itemType) :
                new ObjectParameter("ItemType", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var isItemInParameter = isItemIn.HasValue ?
                new ObjectParameter("IsItemIn", isItemIn) :
                new ObjectParameter("IsItemIn", typeof(bool));
    
            var isItemOutParameter = isItemOut.HasValue ?
                new ObjectParameter("IsItemOut", isItemOut) :
                new ObjectParameter("IsItemOut", typeof(bool));
    
            var isPhotoParameter = isPhoto.HasValue ?
                new ObjectParameter("IsPhoto", isPhoto) :
                new ObjectParameter("IsPhoto", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ItemDataView>("GetItemDataViewsByCriteria", itemNameParameter, itemTypeParameter, statusParameter, isItemInParameter, isItemOutParameter, isPhotoParameter);
        }
    
        public virtual int UpdateItem(Nullable<int> itemID, Nullable<int> itemsTypeID, string itemsName, string itemsDisplayEN, string itemsDisplayTH, string description, Nullable<bool> isConfdt, Nullable<bool> isItemIn, Nullable<bool> isItemOut, Nullable<bool> isPhoto, Nullable<bool> isActive, string createBy, string updateBy)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemsTypeIDParameter = itemsTypeID.HasValue ?
                new ObjectParameter("ItemsTypeID", itemsTypeID) :
                new ObjectParameter("ItemsTypeID", typeof(int));
    
            var itemsNameParameter = itemsName != null ?
                new ObjectParameter("ItemsName", itemsName) :
                new ObjectParameter("ItemsName", typeof(string));
    
            var itemsDisplayENParameter = itemsDisplayEN != null ?
                new ObjectParameter("ItemsDisplayEN", itemsDisplayEN) :
                new ObjectParameter("ItemsDisplayEN", typeof(string));
    
            var itemsDisplayTHParameter = itemsDisplayTH != null ?
                new ObjectParameter("ItemsDisplayTH", itemsDisplayTH) :
                new ObjectParameter("ItemsDisplayTH", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var isConfdtParameter = isConfdt.HasValue ?
                new ObjectParameter("IsConfdt", isConfdt) :
                new ObjectParameter("IsConfdt", typeof(bool));
    
            var isItemInParameter = isItemIn.HasValue ?
                new ObjectParameter("IsItemIn", isItemIn) :
                new ObjectParameter("IsItemIn", typeof(bool));
    
            var isItemOutParameter = isItemOut.HasValue ?
                new ObjectParameter("IsItemOut", isItemOut) :
                new ObjectParameter("IsItemOut", typeof(bool));
    
            var isPhotoParameter = isPhoto.HasValue ?
                new ObjectParameter("IsPhoto", isPhoto) :
                new ObjectParameter("IsPhoto", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateItem", itemIDParameter, itemsTypeIDParameter, itemsNameParameter, itemsDisplayENParameter, itemsDisplayTHParameter, descriptionParameter, isConfdtParameter, isItemInParameter, isItemOutParameter, isPhotoParameter, isActiveParameter, createByParameter, updateByParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertItem(Nullable<int> itemsTypeID, string itemsName, string itemsDisplayEN, string itemsDisplayTH, string description, Nullable<bool> isConfdt, Nullable<bool> isItemIn, Nullable<bool> isItemOut, Nullable<bool> isPhoto, Nullable<bool> isActive, string createBy, string updateBy)
        {
            var itemsTypeIDParameter = itemsTypeID.HasValue ?
                new ObjectParameter("ItemsTypeID", itemsTypeID) :
                new ObjectParameter("ItemsTypeID", typeof(int));
    
            var itemsNameParameter = itemsName != null ?
                new ObjectParameter("ItemsName", itemsName) :
                new ObjectParameter("ItemsName", typeof(string));
    
            var itemsDisplayENParameter = itemsDisplayEN != null ?
                new ObjectParameter("ItemsDisplayEN", itemsDisplayEN) :
                new ObjectParameter("ItemsDisplayEN", typeof(string));
    
            var itemsDisplayTHParameter = itemsDisplayTH != null ?
                new ObjectParameter("ItemsDisplayTH", itemsDisplayTH) :
                new ObjectParameter("ItemsDisplayTH", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var isConfdtParameter = isConfdt.HasValue ?
                new ObjectParameter("IsConfdt", isConfdt) :
                new ObjectParameter("IsConfdt", typeof(bool));
    
            var isItemInParameter = isItemIn.HasValue ?
                new ObjectParameter("IsItemIn", isItemIn) :
                new ObjectParameter("IsItemIn", typeof(bool));
    
            var isItemOutParameter = isItemOut.HasValue ?
                new ObjectParameter("IsItemOut", isItemOut) :
                new ObjectParameter("IsItemOut", typeof(bool));
    
            var isPhotoParameter = isPhoto.HasValue ?
                new ObjectParameter("IsPhoto", isPhoto) :
                new ObjectParameter("IsPhoto", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertItem", itemsTypeIDParameter, itemsNameParameter, itemsDisplayENParameter, itemsDisplayTHParameter, descriptionParameter, isConfdtParameter, isItemInParameter, isItemOutParameter, isPhotoParameter, isActiveParameter, createByParameter, updateByParameter);
        }
    
        public virtual int DeletePermissionMappingsByRoleId(Nullable<int> roleId)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePermissionMappingsByRoleId", roleIdParameter);
        }
    
        public virtual int UpdatePermissionDashboard(Nullable<int> roleID, Nullable<bool> viewDSH01, Nullable<bool> viewDSH02, Nullable<bool> viewDSH03, Nullable<bool> viewDSH04, Nullable<bool> viewDSH05, Nullable<bool> viewDSH06, Nullable<bool> viewDSH07, Nullable<bool> viewDSH08, string updateBy)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var viewDSH01Parameter = viewDSH01.HasValue ?
                new ObjectParameter("ViewDSH01", viewDSH01) :
                new ObjectParameter("ViewDSH01", typeof(bool));
    
            var viewDSH02Parameter = viewDSH02.HasValue ?
                new ObjectParameter("ViewDSH02", viewDSH02) :
                new ObjectParameter("ViewDSH02", typeof(bool));
    
            var viewDSH03Parameter = viewDSH03.HasValue ?
                new ObjectParameter("ViewDSH03", viewDSH03) :
                new ObjectParameter("ViewDSH03", typeof(bool));
    
            var viewDSH04Parameter = viewDSH04.HasValue ?
                new ObjectParameter("ViewDSH04", viewDSH04) :
                new ObjectParameter("ViewDSH04", typeof(bool));
    
            var viewDSH05Parameter = viewDSH05.HasValue ?
                new ObjectParameter("ViewDSH05", viewDSH05) :
                new ObjectParameter("ViewDSH05", typeof(bool));
    
            var viewDSH06Parameter = viewDSH06.HasValue ?
                new ObjectParameter("ViewDSH06", viewDSH06) :
                new ObjectParameter("ViewDSH06", typeof(bool));
    
            var viewDSH07Parameter = viewDSH07.HasValue ?
                new ObjectParameter("ViewDSH07", viewDSH07) :
                new ObjectParameter("ViewDSH07", typeof(bool));
    
            var viewDSH08Parameter = viewDSH08.HasValue ?
                new ObjectParameter("ViewDSH08", viewDSH08) :
                new ObjectParameter("ViewDSH08", typeof(bool));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePermissionDashboard", roleIDParameter, viewDSH01Parameter, viewDSH02Parameter, viewDSH03Parameter, viewDSH04Parameter, viewDSH05Parameter, viewDSH06Parameter, viewDSH07Parameter, viewDSH08Parameter, updateByParameter);
        }
    
        public virtual ObjectResult<PermissionDashboard> GetPermissionDashboard(Nullable<int> roleId)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PermissionDashboard>("GetPermissionDashboard", roleIdParameter);
        }
    
        public virtual int GetFactory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetFactory");
        }
    
        public virtual ObjectResult<Gate> GetGatesByFactoryCode(string factoryCode)
        {
            var factoryCodeParameter = factoryCode != null ?
                new ObjectParameter("FactoryCode", factoryCode) :
                new ObjectParameter("FactoryCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Gate>("GetGatesByFactoryCode", factoryCodeParameter);
        }
    
        public virtual ObjectResult<Gate> GetGatesByFactoryCode(string factoryCode, MergeOption mergeOption)
        {
            var factoryCodeParameter = factoryCode != null ?
                new ObjectParameter("FactoryCode", factoryCode) :
                new ObjectParameter("FactoryCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Gate>("GetGatesByFactoryCode", mergeOption, factoryCodeParameter);
        }
    
        public virtual ObjectResult<Area> GetAreaByCriteria(string factoryCode, string status)
        {
            var factoryCodeParameter = factoryCode != null ?
                new ObjectParameter("FactoryCode", factoryCode) :
                new ObjectParameter("FactoryCode", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Area>("GetAreaByCriteria", factoryCodeParameter, statusParameter);
        }
    
        public virtual ObjectResult<Area> GetAreaByCriteria(string factoryCode, string status, MergeOption mergeOption)
        {
            var factoryCodeParameter = factoryCode != null ?
                new ObjectParameter("FactoryCode", factoryCode) :
                new ObjectParameter("FactoryCode", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Area>("GetAreaByCriteria", mergeOption, factoryCodeParameter, statusParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckMiscInUse(Nullable<int> miscID)
        {
            var miscIDParameter = miscID.HasValue ?
                new ObjectParameter("MiscID", miscID) :
                new ObjectParameter("MiscID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckMiscInUse", miscIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckDuplicateMisc(string miscType, string miscName)
        {
            var miscTypeParameter = miscType != null ?
                new ObjectParameter("MiscType", miscType) :
                new ObjectParameter("MiscType", typeof(string));
    
            var miscNameParameter = miscName != null ?
                new ObjectParameter("MiscName", miscName) :
                new ObjectParameter("MiscName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckDuplicateMisc", miscTypeParameter, miscNameParameter);
        }
    
        public virtual ObjectResult<AreaDataView> GetAreaDataViews(string userName, Nullable<bool> areaMapping)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var areaMappingParameter = areaMapping.HasValue ?
                new ObjectParameter("AreaMapping", areaMapping) :
                new ObjectParameter("AreaMapping", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AreaDataView>("GetAreaDataViews", userNameParameter, areaMappingParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> CheckItemInUse(Nullable<int> itemID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("CheckItemInUse", itemIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckDuplicateItem(Nullable<int> itemTypeID, string itemName)
        {
            var itemTypeIDParameter = itemTypeID.HasValue ?
                new ObjectParameter("ItemTypeID", itemTypeID) :
                new ObjectParameter("ItemTypeID", typeof(int));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckDuplicateItem", itemTypeIDParameter, itemNameParameter);
        }
    
        public virtual ObjectResult<SystemMisc> GetCardTypeForSearch()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SystemMisc>("GetCardTypeForSearch");
        }
    
        public virtual ObjectResult<SystemMisc> GetCardTypeForSearch(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SystemMisc>("GetCardTypeForSearch", mergeOption);
        }
    
        public virtual ObjectResult<SystemMisc> GetCardTypeForCreate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SystemMisc>("GetCardTypeForCreate");
        }
    
        public virtual ObjectResult<SystemMisc> GetCardTypeForCreate(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SystemMisc>("GetCardTypeForCreate", mergeOption);
        }
    
        public virtual ObjectResult<Card> GetCardsByCriteria(string cardNo, string cardType, string isActive)
        {
            var cardNoParameter = cardNo != null ?
                new ObjectParameter("CardNo", cardNo) :
                new ObjectParameter("CardNo", typeof(string));
    
            var cardTypeParameter = cardType != null ?
                new ObjectParameter("CardType", cardType) :
                new ObjectParameter("CardType", typeof(string));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Card>("GetCardsByCriteria", cardNoParameter, cardTypeParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<Card> GetCardsByCriteria(string cardNo, string cardType, string isActive, MergeOption mergeOption)
        {
            var cardNoParameter = cardNo != null ?
                new ObjectParameter("CardNo", cardNo) :
                new ObjectParameter("CardNo", typeof(string));
    
            var cardTypeParameter = cardType != null ?
                new ObjectParameter("CardType", cardType) :
                new ObjectParameter("CardType", typeof(string));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Card>("GetCardsByCriteria", mergeOption, cardNoParameter, cardTypeParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertArea(string factoryCode, string areaName, string areaDisplayEN, string areaDisplayTH, string confdtLevel, Nullable<bool> isActive, string createBy)
        {
            var factoryCodeParameter = factoryCode != null ?
                new ObjectParameter("FactoryCode", factoryCode) :
                new ObjectParameter("FactoryCode", typeof(string));
    
            var areaNameParameter = areaName != null ?
                new ObjectParameter("AreaName", areaName) :
                new ObjectParameter("AreaName", typeof(string));
    
            var areaDisplayENParameter = areaDisplayEN != null ?
                new ObjectParameter("AreaDisplayEN", areaDisplayEN) :
                new ObjectParameter("AreaDisplayEN", typeof(string));
    
            var areaDisplayTHParameter = areaDisplayTH != null ?
                new ObjectParameter("AreaDisplayTH", areaDisplayTH) :
                new ObjectParameter("AreaDisplayTH", typeof(string));
    
            var confdtLevelParameter = confdtLevel != null ?
                new ObjectParameter("ConfdtLevel", confdtLevel) :
                new ObjectParameter("ConfdtLevel", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertArea", factoryCodeParameter, areaNameParameter, areaDisplayENParameter, areaDisplayTHParameter, confdtLevelParameter, isActiveParameter, createByParameter);
        }
    
        public virtual int UpdateArea(Nullable<int> areaID, string factoryCode, string areaName, string areaDisplayEN, string areaDisplayTH, string confdtLevel, Nullable<bool> isActive, string updateBy)
        {
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("AreaID", areaID) :
                new ObjectParameter("AreaID", typeof(int));
    
            var factoryCodeParameter = factoryCode != null ?
                new ObjectParameter("FactoryCode", factoryCode) :
                new ObjectParameter("FactoryCode", typeof(string));
    
            var areaNameParameter = areaName != null ?
                new ObjectParameter("AreaName", areaName) :
                new ObjectParameter("AreaName", typeof(string));
    
            var areaDisplayENParameter = areaDisplayEN != null ?
                new ObjectParameter("AreaDisplayEN", areaDisplayEN) :
                new ObjectParameter("AreaDisplayEN", typeof(string));
    
            var areaDisplayTHParameter = areaDisplayTH != null ?
                new ObjectParameter("AreaDisplayTH", areaDisplayTH) :
                new ObjectParameter("AreaDisplayTH", typeof(string));
    
            var confdtLevelParameter = confdtLevel != null ?
                new ObjectParameter("ConfdtLevel", confdtLevel) :
                new ObjectParameter("ConfdtLevel", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateArea", areaIDParameter, factoryCodeParameter, areaNameParameter, areaDisplayENParameter, areaDisplayTHParameter, confdtLevelParameter, isActiveParameter, updateByParameter);
        }
    
        public virtual int InsertAreaGateMapping(Nullable<int> areaID, string gateID)
        {
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("AreaID", areaID) :
                new ObjectParameter("AreaID", typeof(int));
    
            var gateIDParameter = gateID != null ?
                new ObjectParameter("GateID", gateID) :
                new ObjectParameter("GateID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertAreaGateMapping", areaIDParameter, gateIDParameter);
        }
    
        public virtual int DeleteAreaGateMapping(Nullable<int> areaID)
        {
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("AreaID", areaID) :
                new ObjectParameter("AreaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAreaGateMapping", areaIDParameter);
        }
    
        public virtual int DeleteCard(string cardID)
        {
            var cardIDParameter = cardID != null ?
                new ObjectParameter("CardID", cardID) :
                new ObjectParameter("CardID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCard", cardIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckDuplicateCard(string cardNo, string cardType)
        {
            var cardNoParameter = cardNo != null ?
                new ObjectParameter("CardNo", cardNo) :
                new ObjectParameter("CardNo", typeof(string));
    
            var cardTypeParameter = cardType != null ?
                new ObjectParameter("CardType", cardType) :
                new ObjectParameter("CardType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckDuplicateCard", cardNoParameter, cardTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> CheckCardInUse(string cardID)
        {
            var cardIDParameter = cardID != null ?
                new ObjectParameter("CardID", cardID) :
                new ObjectParameter("CardID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("CheckCardInUse", cardIDParameter);
        }
    
        public virtual int InsertCard(string cardID, string cardType, string cardNo, string note, Nullable<bool> isActive, string createBy)
        {
            var cardIDParameter = cardID != null ?
                new ObjectParameter("CardID", cardID) :
                new ObjectParameter("CardID", typeof(string));
    
            var cardTypeParameter = cardType != null ?
                new ObjectParameter("CardType", cardType) :
                new ObjectParameter("CardType", typeof(string));
    
            var cardNoParameter = cardNo != null ?
                new ObjectParameter("CardNo", cardNo) :
                new ObjectParameter("CardNo", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertCard", cardIDParameter, cardTypeParameter, cardNoParameter, noteParameter, isActiveParameter, createByParameter);
        }
    
        public virtual int InsertAreaCardMapping(string cardID, Nullable<int> areaID, Nullable<bool> isMainArea)
        {
            var cardIDParameter = cardID != null ?
                new ObjectParameter("CardID", cardID) :
                new ObjectParameter("CardID", typeof(string));
    
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("AreaID", areaID) :
                new ObjectParameter("AreaID", typeof(int));
    
            var isMainAreaParameter = isMainArea.HasValue ?
                new ObjectParameter("IsMainArea", isMainArea) :
                new ObjectParameter("IsMainArea", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertAreaCardMapping", cardIDParameter, areaIDParameter, isMainAreaParameter);
        }
    
        public virtual int UpdateCard(string cardID, string cardType, string cardNo, string note, Nullable<bool> isActive, string updateBy)
        {
            var cardIDParameter = cardID != null ?
                new ObjectParameter("CardID", cardID) :
                new ObjectParameter("CardID", typeof(string));
    
            var cardTypeParameter = cardType != null ?
                new ObjectParameter("CardType", cardType) :
                new ObjectParameter("CardType", typeof(string));
    
            var cardNoParameter = cardNo != null ?
                new ObjectParameter("CardNo", cardNo) :
                new ObjectParameter("CardNo", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCard", cardIDParameter, cardTypeParameter, cardNoParameter, noteParameter, isActiveParameter, updateByParameter);
        }
    
        public virtual int DeleteAreaCardMapping(string cardID)
        {
            var cardIDParameter = cardID != null ?
                new ObjectParameter("CardID", cardID) :
                new ObjectParameter("CardID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAreaCardMapping", cardIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckDuplicateArea(string areaName, string factoryCode)
        {
            var areaNameParameter = areaName != null ?
                new ObjectParameter("AreaName", areaName) :
                new ObjectParameter("AreaName", typeof(string));
    
            var factoryCodeParameter = factoryCode != null ?
                new ObjectParameter("FactoryCode", factoryCode) :
                new ObjectParameter("FactoryCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckDuplicateArea", areaNameParameter, factoryCodeParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> CheckAreaInUse(Nullable<int> areaID)
        {
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("AreaID", areaID) :
                new ObjectParameter("AreaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("CheckAreaInUse", areaIDParameter);
        }
    
        public virtual ObjectResult<EmployeeApprovalDataView> GetSuperiorApprover(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeApprovalDataView>("GetSuperiorApprover", userNameParameter);
        }
    
        public virtual ObjectResult<EmployeeApprovalDataView> GetAreaApprover(Nullable<int> areaID)
        {
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("AreaID", areaID) :
                new ObjectParameter("AreaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeApprovalDataView>("GetAreaApprover", areaIDParameter);
        }
    
        public virtual ObjectResult<EmployeeApprovalDataView> GetAcknowledgePerson()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeApprovalDataView>("GetAcknowledgePerson");
        }
    
        public virtual ObjectResult<Area> FindArea(Nullable<int> areaID, string name)
        {
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("AreaID", areaID) :
                new ObjectParameter("AreaID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Area>("FindArea", areaIDParameter, nameParameter);
        }
    
        public virtual ObjectResult<Area> FindArea(Nullable<int> areaID, string name, MergeOption mergeOption)
        {
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("AreaID", areaID) :
                new ObjectParameter("AreaID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Area>("FindArea", mergeOption, areaIDParameter, nameParameter);
        }
    
        public virtual ObjectResult<Department> FindDepartment(string departmentID, string name)
        {
            var departmentIDParameter = departmentID != null ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Department>("FindDepartment", departmentIDParameter, nameParameter);
        }
    
        public virtual ObjectResult<Department> FindDepartment(string departmentID, string name, MergeOption mergeOption)
        {
            var departmentIDParameter = departmentID != null ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Department>("FindDepartment", mergeOption, departmentIDParameter, nameParameter);
        }
    
        public virtual ObjectResult<EmployeeInformation> GetEmployeeInformation(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeInformation>("GetEmployeeInformation", userNameParameter);
        }
    
        public virtual ObjectResult<EmployeeDataView> FindEmployee(string employeeID, string employeeName, string position, string department, Nullable<int> filterType)
        {
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            var employeeNameParameter = employeeName != null ?
                new ObjectParameter("EmployeeName", employeeName) :
                new ObjectParameter("EmployeeName", typeof(string));
    
            var positionParameter = position != null ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var filterTypeParameter = filterType.HasValue ?
                new ObjectParameter("FilterType", filterType) :
                new ObjectParameter("FilterType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeDataView>("FindEmployee", employeeIDParameter, employeeNameParameter, positionParameter, departmentParameter, filterTypeParameter);
        }
    
        public virtual ObjectResult<string> InsertAcsPhoto(string status, Nullable<System.DateTime> takePhotoDateFrom, Nullable<System.TimeSpan> takePhotoTimeFrom, Nullable<System.DateTime> takePhotoDateTo, Nullable<System.TimeSpan> takePhotoTimeTo, Nullable<int> areaID, string photoByType, string photoEmpID, string takePhotoName, string witnessEmpID, string targetItem, Nullable<int> equipItemID, string otherEquip, Nullable<int> purposeCodeID, string otherPurpose, Nullable<bool> isLending, string note, string createBy, string ackBy)
        {
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var takePhotoDateFromParameter = takePhotoDateFrom.HasValue ?
                new ObjectParameter("TakePhotoDateFrom", takePhotoDateFrom) :
                new ObjectParameter("TakePhotoDateFrom", typeof(System.DateTime));
    
            var takePhotoTimeFromParameter = takePhotoTimeFrom.HasValue ?
                new ObjectParameter("TakePhotoTimeFrom", takePhotoTimeFrom) :
                new ObjectParameter("TakePhotoTimeFrom", typeof(System.TimeSpan));
    
            var takePhotoDateToParameter = takePhotoDateTo.HasValue ?
                new ObjectParameter("TakePhotoDateTo", takePhotoDateTo) :
                new ObjectParameter("TakePhotoDateTo", typeof(System.DateTime));
    
            var takePhotoTimeToParameter = takePhotoTimeTo.HasValue ?
                new ObjectParameter("TakePhotoTimeTo", takePhotoTimeTo) :
                new ObjectParameter("TakePhotoTimeTo", typeof(System.TimeSpan));
    
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("AreaID", areaID) :
                new ObjectParameter("AreaID", typeof(int));
    
            var photoByTypeParameter = photoByType != null ?
                new ObjectParameter("PhotoByType", photoByType) :
                new ObjectParameter("PhotoByType", typeof(string));
    
            var photoEmpIDParameter = photoEmpID != null ?
                new ObjectParameter("PhotoEmpID", photoEmpID) :
                new ObjectParameter("PhotoEmpID", typeof(string));
    
            var takePhotoNameParameter = takePhotoName != null ?
                new ObjectParameter("TakePhotoName", takePhotoName) :
                new ObjectParameter("TakePhotoName", typeof(string));
    
            var witnessEmpIDParameter = witnessEmpID != null ?
                new ObjectParameter("WitnessEmpID", witnessEmpID) :
                new ObjectParameter("WitnessEmpID", typeof(string));
    
            var targetItemParameter = targetItem != null ?
                new ObjectParameter("TargetItem", targetItem) :
                new ObjectParameter("TargetItem", typeof(string));
    
            var equipItemIDParameter = equipItemID.HasValue ?
                new ObjectParameter("EquipItemID", equipItemID) :
                new ObjectParameter("EquipItemID", typeof(int));
    
            var otherEquipParameter = otherEquip != null ?
                new ObjectParameter("OtherEquip", otherEquip) :
                new ObjectParameter("OtherEquip", typeof(string));
    
            var purposeCodeIDParameter = purposeCodeID.HasValue ?
                new ObjectParameter("PurposeCodeID", purposeCodeID) :
                new ObjectParameter("PurposeCodeID", typeof(int));
    
            var otherPurposeParameter = otherPurpose != null ?
                new ObjectParameter("OtherPurpose", otherPurpose) :
                new ObjectParameter("OtherPurpose", typeof(string));
    
            var isLendingParameter = isLending.HasValue ?
                new ObjectParameter("IsLending", isLending) :
                new ObjectParameter("IsLending", typeof(bool));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var ackByParameter = ackBy != null ?
                new ObjectParameter("AckBy", ackBy) :
                new ObjectParameter("AckBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("InsertAcsPhoto", statusParameter, takePhotoDateFromParameter, takePhotoTimeFromParameter, takePhotoDateToParameter, takePhotoTimeToParameter, areaIDParameter, photoByTypeParameter, photoEmpIDParameter, takePhotoNameParameter, witnessEmpIDParameter, targetItemParameter, equipItemIDParameter, otherEquipParameter, purposeCodeIDParameter, otherPurposeParameter, isLendingParameter, noteParameter, createByParameter, ackByParameter);
        }
    
        public virtual int InsertReqApproverList(string reqNo, Nullable<int> step, string approveUserName, Nullable<int> areaID, Nullable<System.Guid> referenceApprovalID, string createBy)
        {
            var reqNoParameter = reqNo != null ?
                new ObjectParameter("ReqNo", reqNo) :
                new ObjectParameter("ReqNo", typeof(string));
    
            var stepParameter = step.HasValue ?
                new ObjectParameter("Step", step) :
                new ObjectParameter("Step", typeof(int));
    
            var approveUserNameParameter = approveUserName != null ?
                new ObjectParameter("ApproveUserName", approveUserName) :
                new ObjectParameter("ApproveUserName", typeof(string));
    
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("AreaID", areaID) :
                new ObjectParameter("AreaID", typeof(int));
    
            var referenceApprovalIDParameter = referenceApprovalID.HasValue ?
                new ObjectParameter("ReferenceApprovalID", referenceApprovalID) :
                new ObjectParameter("ReferenceApprovalID", typeof(System.Guid));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertReqApproverList", reqNoParameter, stepParameter, approveUserNameParameter, areaIDParameter, referenceApprovalIDParameter, createByParameter);
        }
    
        public virtual ObjectResult<EntryTimeSetting> GetDefaultEntryTime()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EntryTimeSetting>("GetDefaultEntryTime");
        }
    
        public virtual ObjectResult<Position> FindPosition(string positionID, string name)
        {
            var positionIDParameter = positionID != null ?
                new ObjectParameter("PositionID", positionID) :
                new ObjectParameter("PositionID", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Position>("FindPosition", positionIDParameter, nameParameter);
        }
    
        public virtual ObjectResult<Position> FindPosition(string positionID, string name, MergeOption mergeOption)
        {
            var positionIDParameter = positionID != null ?
                new ObjectParameter("PositionID", positionID) :
                new ObjectParameter("PositionID", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Position>("FindPosition", mergeOption, positionIDParameter, nameParameter);
        }
    
        public virtual int DeleteReqApproverList(string requestNo)
        {
            var requestNoParameter = requestNo != null ?
                new ObjectParameter("RequestNo", requestNo) :
                new ObjectParameter("RequestNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteReqApproverList", requestNoParameter);
        }
    
        public virtual ObjectResult<EmployeeDataView> GetEmployeeDataViewsByCriteria(string empID, string empName, string departmentID, string positionID)
        {
            var empIDParameter = empID != null ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(string));
    
            var empNameParameter = empName != null ?
                new ObjectParameter("EmpName", empName) :
                new ObjectParameter("EmpName", typeof(string));
    
            var departmentIDParameter = departmentID != null ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(string));
    
            var positionIDParameter = positionID != null ?
                new ObjectParameter("PositionID", positionID) :
                new ObjectParameter("PositionID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeDataView>("GetEmployeeDataViewsByCriteria", empIDParameter, empNameParameter, departmentIDParameter, positionIDParameter);
        }
    
        public virtual ObjectResult<UserRole> GetUserRolesByEmployeeID(string empID)
        {
            var empIDParameter = empID != null ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserRole>("GetUserRolesByEmployeeID", empIDParameter);
        }
    
        public virtual ObjectResult<AreaMapping> GetAreaByEmployeeID(string empID)
        {
            var empIDParameter = empID != null ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AreaMapping>("GetAreaByEmployeeID", empIDParameter);
        }
    
        public virtual int InsertOrUpdateCard(string cardID, string cardType, string cardNo, string note, string createBy)
        {
            var cardIDParameter = cardID != null ?
                new ObjectParameter("CardID", cardID) :
                new ObjectParameter("CardID", typeof(string));
    
            var cardTypeParameter = cardType != null ?
                new ObjectParameter("CardType", cardType) :
                new ObjectParameter("CardType", typeof(string));
    
            var cardNoParameter = cardNo != null ?
                new ObjectParameter("CardNo", cardNo) :
                new ObjectParameter("CardNo", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertOrUpdateCard", cardIDParameter, cardTypeParameter, cardNoParameter, noteParameter, createByParameter);
        }
    
        public virtual ObjectResult<VisitorCardRegistrationView> GetVisitorCardRegistrationViews(Nullable<System.DateTime> entryDate, string visitorName, string company)
        {
            var entryDateParameter = entryDate.HasValue ?
                new ObjectParameter("EntryDate", entryDate) :
                new ObjectParameter("EntryDate", typeof(System.DateTime));
    
            var visitorNameParameter = visitorName != null ?
                new ObjectParameter("VisitorName", visitorName) :
                new ObjectParameter("VisitorName", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VisitorCardRegistrationView>("GetVisitorCardRegistrationViews", entryDateParameter, visitorNameParameter, companyParameter);
        }
    
        public virtual ObjectResult<BusinessTripCardRegistrationView> GetBusinessTripCardRegistrationViews(Nullable<System.DateTime> entryDate, string businessName, string requesterName)
        {
            var entryDateParameter = entryDate.HasValue ?
                new ObjectParameter("EntryDate", entryDate) :
                new ObjectParameter("EntryDate", typeof(System.DateTime));
    
            var businessNameParameter = businessName != null ?
                new ObjectParameter("BusinessName", businessName) :
                new ObjectParameter("BusinessName", typeof(string));
    
            var requesterNameParameter = requesterName != null ?
                new ObjectParameter("RequesterName", requesterName) :
                new ObjectParameter("RequesterName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BusinessTripCardRegistrationView>("GetBusinessTripCardRegistrationViews", entryDateParameter, businessNameParameter, requesterNameParameter);
        }
    
        public virtual int GetUserByEmployeeID(string empID)
        {
            var empIDParameter = empID != null ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUserByEmployeeID", empIDParameter);
        }
    
        public virtual int UpdateAcsPhoto(string requestNo, string status, Nullable<System.DateTime> takePhotoDateFrom, Nullable<System.TimeSpan> takePhotoTimeFrom, Nullable<System.DateTime> takePhotoDateTo, Nullable<System.TimeSpan> takePhotoTimeTo, Nullable<bool> isLending, string assetCode, Nullable<System.DateTime> actReturnDate, Nullable<int> purposeCodeID, string otherPurpose, string note, string forceDoneBy, Nullable<System.DateTime> forceDoneDate, string updateBy)
        {
            var requestNoParameter = requestNo != null ?
                new ObjectParameter("RequestNo", requestNo) :
                new ObjectParameter("RequestNo", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var takePhotoDateFromParameter = takePhotoDateFrom.HasValue ?
                new ObjectParameter("TakePhotoDateFrom", takePhotoDateFrom) :
                new ObjectParameter("TakePhotoDateFrom", typeof(System.DateTime));
    
            var takePhotoTimeFromParameter = takePhotoTimeFrom.HasValue ?
                new ObjectParameter("TakePhotoTimeFrom", takePhotoTimeFrom) :
                new ObjectParameter("TakePhotoTimeFrom", typeof(System.TimeSpan));
    
            var takePhotoDateToParameter = takePhotoDateTo.HasValue ?
                new ObjectParameter("TakePhotoDateTo", takePhotoDateTo) :
                new ObjectParameter("TakePhotoDateTo", typeof(System.DateTime));
    
            var takePhotoTimeToParameter = takePhotoTimeTo.HasValue ?
                new ObjectParameter("TakePhotoTimeTo", takePhotoTimeTo) :
                new ObjectParameter("TakePhotoTimeTo", typeof(System.TimeSpan));
    
            var isLendingParameter = isLending.HasValue ?
                new ObjectParameter("IsLending", isLending) :
                new ObjectParameter("IsLending", typeof(bool));
    
            var assetCodeParameter = assetCode != null ?
                new ObjectParameter("AssetCode", assetCode) :
                new ObjectParameter("AssetCode", typeof(string));
    
            var actReturnDateParameter = actReturnDate.HasValue ?
                new ObjectParameter("ActReturnDate", actReturnDate) :
                new ObjectParameter("ActReturnDate", typeof(System.DateTime));
    
            var purposeCodeIDParameter = purposeCodeID.HasValue ?
                new ObjectParameter("PurposeCodeID", purposeCodeID) :
                new ObjectParameter("PurposeCodeID", typeof(int));
    
            var otherPurposeParameter = otherPurpose != null ?
                new ObjectParameter("OtherPurpose", otherPurpose) :
                new ObjectParameter("OtherPurpose", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var forceDoneByParameter = forceDoneBy != null ?
                new ObjectParameter("ForceDoneBy", forceDoneBy) :
                new ObjectParameter("ForceDoneBy", typeof(string));
    
            var forceDoneDateParameter = forceDoneDate.HasValue ?
                new ObjectParameter("ForceDoneDate", forceDoneDate) :
                new ObjectParameter("ForceDoneDate", typeof(System.DateTime));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAcsPhoto", requestNoParameter, statusParameter, takePhotoDateFromParameter, takePhotoTimeFromParameter, takePhotoDateToParameter, takePhotoTimeToParameter, isLendingParameter, assetCodeParameter, actReturnDateParameter, purposeCodeIDParameter, otherPurposeParameter, noteParameter, forceDoneByParameter, forceDoneDateParameter, updateByParameter);
        }
    
        public virtual int UpdateReqPhotoStatus(string reqNo, string status, string note, string userName)
        {
            var reqNoParameter = reqNo != null ?
                new ObjectParameter("ReqNo", reqNo) :
                new ObjectParameter("ReqNo", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateReqPhotoStatus", reqNoParameter, statusParameter, noteParameter, userNameParameter);
        }
    
        public virtual ObjectResult<CheckOverlapPeriodCardNoList> CheckOverlapPeriodCardNo(Nullable<System.DateTime> entryDateFrom, Nullable<System.DateTime> entryDateTo, string cardNo)
        {
            var entryDateFromParameter = entryDateFrom.HasValue ?
                new ObjectParameter("EntryDateFrom", entryDateFrom) :
                new ObjectParameter("EntryDateFrom", typeof(System.DateTime));
    
            var entryDateToParameter = entryDateTo.HasValue ?
                new ObjectParameter("EntryDateTo", entryDateTo) :
                new ObjectParameter("EntryDateTo", typeof(System.DateTime));
    
            var cardNoParameter = cardNo != null ?
                new ObjectParameter("CardNo", cardNo) :
                new ObjectParameter("CardNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckOverlapPeriodCardNoList>("CheckOverlapPeriodCardNo", entryDateFromParameter, entryDateToParameter, cardNoParameter);
        }
    
        public virtual ObjectResult<CheckOverlapCardNoList> CheckOverlapCardNo(Nullable<System.DateTime> entryDate, string cardNo)
        {
            var entryDateParameter = entryDate.HasValue ?
                new ObjectParameter("EntryDate", entryDate) :
                new ObjectParameter("EntryDate", typeof(System.DateTime));
    
            var cardNoParameter = cardNo != null ?
                new ObjectParameter("CardNo", cardNo) :
                new ObjectParameter("CardNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckOverlapCardNoList>("CheckOverlapCardNo", entryDateParameter, cardNoParameter);
        }
    
        public virtual ObjectResult<CardNoView> GetCardNo(string cardID, string cardType)
        {
            var cardIDParameter = cardID != null ?
                new ObjectParameter("CardID", cardID) :
                new ObjectParameter("CardID", typeof(string));
    
            var cardTypeParameter = cardType != null ?
                new ObjectParameter("CardType", cardType) :
                new ObjectParameter("CardType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CardNoView>("GetCardNo", cardIDParameter, cardTypeParameter);
        }
    
        public virtual ObjectResult<EmployeeDataView> GetEmployeeDataViewsForRequest(string loginUser, Nullable<int> requestFor)
        {
            var loginUserParameter = loginUser != null ?
                new ObjectParameter("LoginUser", loginUser) :
                new ObjectParameter("LoginUser", typeof(string));
    
            var requestForParameter = requestFor.HasValue ?
                new ObjectParameter("RequestFor", requestFor) :
                new ObjectParameter("RequestFor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeDataView>("GetEmployeeDataViewsForRequest", loginUserParameter, requestForParameter);
        }
    
        public virtual int DeleteRoleUserMapping(string empID)
        {
            var empIDParameter = empID != null ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteRoleUserMapping", empIDParameter);
        }
    
        public virtual int InsertRoleUserMapping(string empID, Nullable<int> roleID)
        {
            var empIDParameter = empID != null ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(string));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertRoleUserMapping", empIDParameter, roleIDParameter);
        }
    
        public virtual ObjectResult<Department> GetDepartment()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Department>("GetDepartment");
        }
    
        public virtual ObjectResult<Department> GetDepartment(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Department>("GetDepartment", mergeOption);
        }
    
        public virtual ObjectResult<Position> GetPositionsForAreaApproval()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Position>("GetPositionsForAreaApproval");
        }
    
        public virtual ObjectResult<Position> GetPositionsForAreaApproval(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Position>("GetPositionsForAreaApproval", mergeOption);
        }
    
        public virtual int DeleteAreaApprover(Nullable<int> areaId)
        {
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAreaApprover", areaIdParameter);
        }
    
        public virtual int DeleteArea(Nullable<int> areaID)
        {
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("AreaID", areaID) :
                new ObjectParameter("AreaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteArea", areaIDParameter);
        }
    
        public virtual ObjectResult<RequestDataView> GetRequestDataViewsByCriteria(string objectID, string reqNo, string createBy, string areas, Nullable<System.DateTime> entryDateFrom, Nullable<System.DateTime> entryDateTo, string status, string assetCode)
        {
            var objectIDParameter = objectID != null ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(string));
    
            var reqNoParameter = reqNo != null ?
                new ObjectParameter("ReqNo", reqNo) :
                new ObjectParameter("ReqNo", typeof(string));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var areasParameter = areas != null ?
                new ObjectParameter("Areas", areas) :
                new ObjectParameter("Areas", typeof(string));
    
            var entryDateFromParameter = entryDateFrom.HasValue ?
                new ObjectParameter("EntryDateFrom", entryDateFrom) :
                new ObjectParameter("EntryDateFrom", typeof(System.DateTime));
    
            var entryDateToParameter = entryDateTo.HasValue ?
                new ObjectParameter("EntryDateTo", entryDateTo) :
                new ObjectParameter("EntryDateTo", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var assetCodeParameter = assetCode != null ?
                new ObjectParameter("AssetCode", assetCode) :
                new ObjectParameter("AssetCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RequestDataView>("GetRequestDataViewsByCriteria", objectIDParameter, reqNoParameter, createByParameter, areasParameter, entryDateFromParameter, entryDateToParameter, statusParameter, assetCodeParameter);
        }
    
        public virtual ObjectResult<DocumentTypeData> GetDocumentType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DocumentTypeData>("GetDocumentType");
        }
    
        public virtual ObjectResult<RequestDH01DataView> GetDashboardRequestInProgress(string loginUserName, string objectID, string status)
        {
            var loginUserNameParameter = loginUserName != null ?
                new ObjectParameter("LoginUserName", loginUserName) :
                new ObjectParameter("LoginUserName", typeof(string));
    
            var objectIDParameter = objectID != null ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RequestDH01DataView>("GetDashboardRequestInProgress", loginUserNameParameter, objectIDParameter, statusParameter);
        }
    
        public virtual ObjectResult<RequestDH02DataView> GetDashboardRequestWaitToApprover(string loginUserName, string objectID, string status)
        {
            var loginUserNameParameter = loginUserName != null ?
                new ObjectParameter("LoginUserName", loginUserName) :
                new ObjectParameter("LoginUserName", typeof(string));
    
            var objectIDParameter = objectID != null ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RequestDH02DataView>("GetDashboardRequestWaitToApprover", loginUserNameParameter, objectIDParameter, statusParameter);
        }
    
        public virtual ObjectResult<RequestDH03DataView> GetDashboardReqWaitToAcknowledge(string loginUserName, string objectID)
        {
            var loginUserNameParameter = loginUserName != null ?
                new ObjectParameter("LoginUserName", loginUserName) :
                new ObjectParameter("LoginUserName", typeof(string));
    
            var objectIDParameter = objectID != null ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RequestDH03DataView>("GetDashboardReqWaitToAcknowledge", loginUserNameParameter, objectIDParameter);
        }
    
        public virtual ObjectResult<RequestDH04DataView> GetDashboardSecurityRoom(string loginUserName, string objectID)
        {
            var loginUserNameParameter = loginUserName != null ?
                new ObjectParameter("LoginUserName", loginUserName) :
                new ObjectParameter("LoginUserName", typeof(string));
    
            var objectIDParameter = objectID != null ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RequestDH04DataView>("GetDashboardSecurityRoom", loginUserNameParameter, objectIDParameter);
        }
    
        public virtual ObjectResult<RequestDH05DataView> GetDashboardItemOut(string loginUserName)
        {
            var loginUserNameParameter = loginUserName != null ?
                new ObjectParameter("LoginUserName", loginUserName) :
                new ObjectParameter("LoginUserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RequestDH05DataView>("GetDashboardItemOut", loginUserNameParameter);
        }
    
        public virtual ObjectResult<RequestDH06DataView> GetDashboardItemIn(string loginUserName)
        {
            var loginUserNameParameter = loginUserName != null ?
                new ObjectParameter("LoginUserName", loginUserName) :
                new ObjectParameter("LoginUserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RequestDH06DataView>("GetDashboardItemIn", loginUserNameParameter);
        }
    
        public virtual ObjectResult<RequestDH07DataView> GetDashboardLending(string loginUserName)
        {
            var loginUserNameParameter = loginUserName != null ?
                new ObjectParameter("LoginUserName", loginUserName) :
                new ObjectParameter("LoginUserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RequestDH07DataView>("GetDashboardLending", loginUserNameParameter);
        }
    
        public virtual ObjectResult<RequestDH08DataView> GetDashboardWitness(string loginUserName)
        {
            var loginUserNameParameter = loginUserName != null ?
                new ObjectParameter("LoginUserName", loginUserName) :
                new ObjectParameter("LoginUserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RequestDH08DataView>("GetDashboardWitness", loginUserNameParameter);
        }
    
        public virtual ObjectResult<string> InsertAcsEmployee(string status, string requestFor, Nullable<System.DateTime> entryDateFrom, Nullable<System.TimeSpan> entryTimeFrom, Nullable<System.DateTime> entryDateTo, Nullable<System.TimeSpan> entryTimeTo, Nullable<int> purposeCodeID, string otherPurpose, string note, string createBy)
        {
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var requestForParameter = requestFor != null ?
                new ObjectParameter("RequestFor", requestFor) :
                new ObjectParameter("RequestFor", typeof(string));
    
            var entryDateFromParameter = entryDateFrom.HasValue ?
                new ObjectParameter("EntryDateFrom", entryDateFrom) :
                new ObjectParameter("EntryDateFrom", typeof(System.DateTime));
    
            var entryTimeFromParameter = entryTimeFrom.HasValue ?
                new ObjectParameter("EntryTimeFrom", entryTimeFrom) :
                new ObjectParameter("EntryTimeFrom", typeof(System.TimeSpan));
    
            var entryDateToParameter = entryDateTo.HasValue ?
                new ObjectParameter("EntryDateTo", entryDateTo) :
                new ObjectParameter("EntryDateTo", typeof(System.DateTime));
    
            var entryTimeToParameter = entryTimeTo.HasValue ?
                new ObjectParameter("EntryTimeTo", entryTimeTo) :
                new ObjectParameter("EntryTimeTo", typeof(System.TimeSpan));
    
            var purposeCodeIDParameter = purposeCodeID.HasValue ?
                new ObjectParameter("PurposeCodeID", purposeCodeID) :
                new ObjectParameter("PurposeCodeID", typeof(int));
    
            var otherPurposeParameter = otherPurpose != null ?
                new ObjectParameter("OtherPurpose", otherPurpose) :
                new ObjectParameter("OtherPurpose", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("InsertAcsEmployee", statusParameter, requestForParameter, entryDateFromParameter, entryTimeFromParameter, entryDateToParameter, entryTimeToParameter, purposeCodeIDParameter, otherPurposeParameter, noteParameter, createByParameter);
        }
    
        public virtual int InsertAcsEmployeeDetail(string requestNo, Nullable<int> seq, string empID, string name, string deptName)
        {
            var requestNoParameter = requestNo != null ?
                new ObjectParameter("RequestNo", requestNo) :
                new ObjectParameter("RequestNo", typeof(string));
    
            var seqParameter = seq.HasValue ?
                new ObjectParameter("Seq", seq) :
                new ObjectParameter("Seq", typeof(int));
    
            var empIDParameter = empID != null ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var deptNameParameter = deptName != null ?
                new ObjectParameter("DeptName", deptName) :
                new ObjectParameter("DeptName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertAcsEmployeeDetail", requestNoParameter, seqParameter, empIDParameter, nameParameter, deptNameParameter);
        }
    
        public virtual int DeleteAcsEmployeeDetail(string requestNo)
        {
            var requestNoParameter = requestNo != null ?
                new ObjectParameter("RequestNo", requestNo) :
                new ObjectParameter("RequestNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAcsEmployeeDetail", requestNoParameter);
        }
    
        public virtual int UpdateAcsEmployee(string requestNo, string status, Nullable<System.DateTime> entryDateFrom, Nullable<System.TimeSpan> entryTimeFrom, Nullable<System.DateTime> entryDateTo, Nullable<System.TimeSpan> entryTimeTo, Nullable<int> purposeCodeID, string otherPurpose, string note, string updateBy)
        {
            var requestNoParameter = requestNo != null ?
                new ObjectParameter("RequestNo", requestNo) :
                new ObjectParameter("RequestNo", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var entryDateFromParameter = entryDateFrom.HasValue ?
                new ObjectParameter("EntryDateFrom", entryDateFrom) :
                new ObjectParameter("EntryDateFrom", typeof(System.DateTime));
    
            var entryTimeFromParameter = entryTimeFrom.HasValue ?
                new ObjectParameter("EntryTimeFrom", entryTimeFrom) :
                new ObjectParameter("EntryTimeFrom", typeof(System.TimeSpan));
    
            var entryDateToParameter = entryDateTo.HasValue ?
                new ObjectParameter("EntryDateTo", entryDateTo) :
                new ObjectParameter("EntryDateTo", typeof(System.DateTime));
    
            var entryTimeToParameter = entryTimeTo.HasValue ?
                new ObjectParameter("EntryTimeTo", entryTimeTo) :
                new ObjectParameter("EntryTimeTo", typeof(System.TimeSpan));
    
            var purposeCodeIDParameter = purposeCodeID.HasValue ?
                new ObjectParameter("PurposeCodeID", purposeCodeID) :
                new ObjectParameter("PurposeCodeID", typeof(int));
    
            var otherPurposeParameter = otherPurpose != null ?
                new ObjectParameter("OtherPurpose", otherPurpose) :
                new ObjectParameter("OtherPurpose", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAcsEmployee", requestNoParameter, statusParameter, entryDateFromParameter, entryTimeFromParameter, entryDateToParameter, entryTimeToParameter, purposeCodeIDParameter, otherPurposeParameter, noteParameter, updateByParameter);
        }
    
        public virtual int DeleteReqAreaMappings(string requestNo)
        {
            var requestNoParameter = requestNo != null ?
                new ObjectParameter("RequestNo", requestNo) :
                new ObjectParameter("RequestNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteReqAreaMappings", requestNoParameter);
        }
    
        public virtual int InsertReqAreaMapping(string reqNo, Nullable<int> areaID)
        {
            var reqNoParameter = reqNo != null ?
                new ObjectParameter("ReqNo", reqNo) :
                new ObjectParameter("ReqNo", typeof(string));
    
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("AreaID", areaID) :
                new ObjectParameter("AreaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertReqAreaMapping", reqNoParameter, areaIDParameter);
        }
    
        public virtual int UpdateBusinessTripCardRegistration(Nullable<System.Guid> tranID, string cardID, string updateBy)
        {
            var tranIDParameter = tranID.HasValue ?
                new ObjectParameter("TranID", tranID) :
                new ObjectParameter("TranID", typeof(System.Guid));
    
            var cardIDParameter = cardID != null ?
                new ObjectParameter("CardID", cardID) :
                new ObjectParameter("CardID", typeof(string));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateBusinessTripCardRegistration", tranIDParameter, cardIDParameter, updateByParameter);
        }
    
        public virtual ObjectResult<VIPCardRegistrationView> GetVIPCardRegistrationView(Nullable<System.DateTime> entryDate, string cardType, string cardStatus)
        {
            var entryDateParameter = entryDate.HasValue ?
                new ObjectParameter("EntryDate", entryDate) :
                new ObjectParameter("EntryDate", typeof(System.DateTime));
    
            var cardTypeParameter = cardType != null ?
                new ObjectParameter("CardType", cardType) :
                new ObjectParameter("CardType", typeof(string));
    
            var cardStatusParameter = cardStatus != null ?
                new ObjectParameter("CardStatus", cardStatus) :
                new ObjectParameter("CardStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VIPCardRegistrationView>("GetVIPCardRegistrationView", entryDateParameter, cardTypeParameter, cardStatusParameter);
        }
    
        public virtual ObjectResult<AcsEmployeeDetailDataView> GetAcsEmployeeDetailDataViews(string requestNo)
        {
            var requestNoParameter = requestNo != null ?
                new ObjectParameter("RequestNo", requestNo) :
                new ObjectParameter("RequestNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcsEmployeeDetailDataView>("GetAcsEmployeeDetailDataViews", requestNoParameter);
        }
    
        public virtual ObjectResult<Employee> GetEmployeeByUserName(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Employee>("GetEmployeeByUserName", userNameParameter);
        }
    
        public virtual ObjectResult<Employee> GetEmployeeByUserName(string userName, MergeOption mergeOption)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Employee>("GetEmployeeByUserName", mergeOption, userNameParameter);
        }
    
        public virtual ObjectResult<PrivilegeViewDSHData> GetPrivilegeViewUser(string loginUserName)
        {
            var loginUserNameParameter = loginUserName != null ?
                new ObjectParameter("LoginUserName", loginUserName) :
                new ObjectParameter("LoginUserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PrivilegeViewDSHData>("GetPrivilegeViewUser", loginUserNameParameter);
        }
    
        public virtual ObjectResult<string> InsertAcsVIP(string status, string name, Nullable<int> positionMiscID, string company, string description, string createBy)
        {
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var positionMiscIDParameter = positionMiscID.HasValue ?
                new ObjectParameter("PositionMiscID", positionMiscID) :
                new ObjectParameter("PositionMiscID", typeof(int));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("InsertAcsVIP", statusParameter, nameParameter, positionMiscIDParameter, companyParameter, descriptionParameter, createByParameter);
        }
    
        public virtual int InsertVIPTransactionAcs(string reqNo, string cardID, Nullable<int> status, string updateBy)
        {
            var reqNoParameter = reqNo != null ?
                new ObjectParameter("ReqNo", reqNo) :
                new ObjectParameter("ReqNo", typeof(string));
    
            var cardIDParameter = cardID != null ?
                new ObjectParameter("CardID", cardID) :
                new ObjectParameter("CardID", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertVIPTransactionAcs", reqNoParameter, cardIDParameter, statusParameter, updateByParameter);
        }
    
        public virtual int UpdateAcsVIP(string reqNo, string status, string updateBy)
        {
            var reqNoParameter = reqNo != null ?
                new ObjectParameter("ReqNo", reqNo) :
                new ObjectParameter("ReqNo", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAcsVIP", reqNoParameter, statusParameter, updateByParameter);
        }
    
        public virtual int UpdateVIPTransactionAcs(string reqNo, string cardID, string updateBy)
        {
            var reqNoParameter = reqNo != null ?
                new ObjectParameter("ReqNo", reqNo) :
                new ObjectParameter("ReqNo", typeof(string));
    
            var cardIDParameter = cardID != null ?
                new ObjectParameter("CardID", cardID) :
                new ObjectParameter("CardID", typeof(string));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateVIPTransactionAcs", reqNoParameter, cardIDParameter, updateByParameter);
        }
    
        public virtual ObjectResult<ReceiveReturnVisitorCardDataView> GetReceiveRetrunVisitorCardDataView(Nullable<System.DateTime> entryDate, string visitorName, string company, string factory)
        {
            var entryDateParameter = entryDate.HasValue ?
                new ObjectParameter("EntryDate", entryDate) :
                new ObjectParameter("EntryDate", typeof(System.DateTime));
    
            var visitorNameParameter = visitorName != null ?
                new ObjectParameter("VisitorName", visitorName) :
                new ObjectParameter("VisitorName", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var factoryParameter = factory != null ?
                new ObjectParameter("Factory", factory) :
                new ObjectParameter("Factory", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReceiveReturnVisitorCardDataView>("GetReceiveRetrunVisitorCardDataView", entryDateParameter, visitorNameParameter, companyParameter, factoryParameter);
        }
    
        public virtual ObjectResult<ReceiveReturnBusinessTripCardDataView> GetReceiveReturnBusinessCardDataView(Nullable<System.DateTime> entryDate, string businessName, string requesterName, string factory)
        {
            var entryDateParameter = entryDate.HasValue ?
                new ObjectParameter("EntryDate", entryDate) :
                new ObjectParameter("EntryDate", typeof(System.DateTime));
    
            var businessNameParameter = businessName != null ?
                new ObjectParameter("BusinessName", businessName) :
                new ObjectParameter("BusinessName", typeof(string));
    
            var requesterNameParameter = requesterName != null ?
                new ObjectParameter("RequesterName", requesterName) :
                new ObjectParameter("RequesterName", typeof(string));
    
            var factoryParameter = factory != null ?
                new ObjectParameter("Factory", factory) :
                new ObjectParameter("Factory", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReceiveReturnBusinessTripCardDataView>("GetReceiveReturnBusinessCardDataView", entryDateParameter, businessNameParameter, requesterNameParameter, factoryParameter);
        }
    
        public virtual ObjectResult<string> InsertAcsVisitor(string status, Nullable<System.DateTime> entryDateFrom, Nullable<System.TimeSpan> entryTimeFrom, Nullable<System.DateTime> entryDateTo, Nullable<System.TimeSpan> entryTimeTo, Nullable<int> purposeCodeID, string otherPurpose, string note, string createBy)
        {
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var entryDateFromParameter = entryDateFrom.HasValue ?
                new ObjectParameter("EntryDateFrom", entryDateFrom) :
                new ObjectParameter("EntryDateFrom", typeof(System.DateTime));
    
            var entryTimeFromParameter = entryTimeFrom.HasValue ?
                new ObjectParameter("EntryTimeFrom", entryTimeFrom) :
                new ObjectParameter("EntryTimeFrom", typeof(System.TimeSpan));
    
            var entryDateToParameter = entryDateTo.HasValue ?
                new ObjectParameter("EntryDateTo", entryDateTo) :
                new ObjectParameter("EntryDateTo", typeof(System.DateTime));
    
            var entryTimeToParameter = entryTimeTo.HasValue ?
                new ObjectParameter("EntryTimeTo", entryTimeTo) :
                new ObjectParameter("EntryTimeTo", typeof(System.TimeSpan));
    
            var purposeCodeIDParameter = purposeCodeID.HasValue ?
                new ObjectParameter("PurposeCodeID", purposeCodeID) :
                new ObjectParameter("PurposeCodeID", typeof(int));
    
            var otherPurposeParameter = otherPurpose != null ?
                new ObjectParameter("OtherPurpose", otherPurpose) :
                new ObjectParameter("OtherPurpose", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("InsertAcsVisitor", statusParameter, entryDateFromParameter, entryTimeFromParameter, entryDateToParameter, entryTimeToParameter, purposeCodeIDParameter, otherPurposeParameter, noteParameter, createByParameter);
        }
    
        public virtual int InsertAcsVisitorDetail(string requestNo, Nullable<int> seq, Nullable<int> verifyTypeID, string verifyNo, string name, string company, string deptName, string itemInOut, string photographing, string description)
        {
            var requestNoParameter = requestNo != null ?
                new ObjectParameter("RequestNo", requestNo) :
                new ObjectParameter("RequestNo", typeof(string));
    
            var seqParameter = seq.HasValue ?
                new ObjectParameter("Seq", seq) :
                new ObjectParameter("Seq", typeof(int));
    
            var verifyTypeIDParameter = verifyTypeID.HasValue ?
                new ObjectParameter("VerifyTypeID", verifyTypeID) :
                new ObjectParameter("VerifyTypeID", typeof(int));
    
            var verifyNoParameter = verifyNo != null ?
                new ObjectParameter("VerifyNo", verifyNo) :
                new ObjectParameter("VerifyNo", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var deptNameParameter = deptName != null ?
                new ObjectParameter("DeptName", deptName) :
                new ObjectParameter("DeptName", typeof(string));
    
            var itemInOutParameter = itemInOut != null ?
                new ObjectParameter("ItemInOut", itemInOut) :
                new ObjectParameter("ItemInOut", typeof(string));
    
            var photographingParameter = photographing != null ?
                new ObjectParameter("Photographing", photographing) :
                new ObjectParameter("Photographing", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertAcsVisitorDetail", requestNoParameter, seqParameter, verifyTypeIDParameter, verifyNoParameter, nameParameter, companyParameter, deptNameParameter, itemInOutParameter, photographingParameter, descriptionParameter);
        }
    
        public virtual int UpdateAcsVisitor(string requestNo, string status, Nullable<System.DateTime> entryDateFrom, Nullable<System.TimeSpan> entryTimeFrom, Nullable<System.DateTime> entryDateTo, Nullable<System.TimeSpan> entryTimeTo, Nullable<int> purposeCodeID, string otherPurpose, string note, string updateBy)
        {
            var requestNoParameter = requestNo != null ?
                new ObjectParameter("RequestNo", requestNo) :
                new ObjectParameter("RequestNo", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var entryDateFromParameter = entryDateFrom.HasValue ?
                new ObjectParameter("EntryDateFrom", entryDateFrom) :
                new ObjectParameter("EntryDateFrom", typeof(System.DateTime));
    
            var entryTimeFromParameter = entryTimeFrom.HasValue ?
                new ObjectParameter("EntryTimeFrom", entryTimeFrom) :
                new ObjectParameter("EntryTimeFrom", typeof(System.TimeSpan));
    
            var entryDateToParameter = entryDateTo.HasValue ?
                new ObjectParameter("EntryDateTo", entryDateTo) :
                new ObjectParameter("EntryDateTo", typeof(System.DateTime));
    
            var entryTimeToParameter = entryTimeTo.HasValue ?
                new ObjectParameter("EntryTimeTo", entryTimeTo) :
                new ObjectParameter("EntryTimeTo", typeof(System.TimeSpan));
    
            var purposeCodeIDParameter = purposeCodeID.HasValue ?
                new ObjectParameter("PurposeCodeID", purposeCodeID) :
                new ObjectParameter("PurposeCodeID", typeof(int));
    
            var otherPurposeParameter = otherPurpose != null ?
                new ObjectParameter("OtherPurpose", otherPurpose) :
                new ObjectParameter("OtherPurpose", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAcsVisitor", requestNoParameter, statusParameter, entryDateFromParameter, entryTimeFromParameter, entryDateToParameter, entryTimeToParameter, purposeCodeIDParameter, otherPurposeParameter, noteParameter, updateByParameter);
        }
    
        public virtual int DeleteAcsVisitorDetail(string requestNo)
        {
            var requestNoParameter = requestNo != null ?
                new ObjectParameter("RequestNo", requestNo) :
                new ObjectParameter("RequestNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAcsVisitorDetail", requestNoParameter);
        }
    
        public virtual ObjectResult<AcsVisitorDetailDataView> GetAcsVisitorDetailDataViews(string requestNo)
        {
            var requestNoParameter = requestNo != null ?
                new ObjectParameter("RequestNo", requestNo) :
                new ObjectParameter("RequestNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcsVisitorDetailDataView>("GetAcsVisitorDetailDataViews", requestNoParameter);
        }
    
        public virtual int ReceiveBusinessTripCard(Nullable<System.Guid> tranID, string updateBy)
        {
            var tranIDParameter = tranID.HasValue ?
                new ObjectParameter("TranID", tranID) :
                new ObjectParameter("TranID", typeof(System.Guid));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReceiveBusinessTripCard", tranIDParameter, updateByParameter);
        }
    
        public virtual int ReturnBusinessTripCard(Nullable<System.Guid> tranID, string updateBy)
        {
            var tranIDParameter = tranID.HasValue ?
                new ObjectParameter("TranID", tranID) :
                new ObjectParameter("TranID", typeof(System.Guid));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReturnBusinessTripCard", tranIDParameter, updateByParameter);
        }
    
        public virtual int ReceiveVisitorCard(Nullable<System.Guid> tranID, string updateBy)
        {
            var tranIDParameter = tranID.HasValue ?
                new ObjectParameter("TranID", tranID) :
                new ObjectParameter("TranID", typeof(System.Guid));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReceiveVisitorCard", tranIDParameter, updateByParameter);
        }
    
        public virtual int ReturnVisitorCard(Nullable<System.Guid> tranID, string updateBy)
        {
            var tranIDParameter = tranID.HasValue ?
                new ObjectParameter("TranID", tranID) :
                new ObjectParameter("TranID", typeof(System.Guid));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReturnVisitorCard", tranIDParameter, updateByParameter);
        }
    
        public virtual int InsertAreaMapping(string empID, Nullable<int> areaId, Nullable<bool> isMainArea)
        {
            var empIDParameter = empID != null ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(string));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var isMainAreaParameter = isMainArea.HasValue ?
                new ObjectParameter("IsMainArea", isMainArea) :
                new ObjectParameter("IsMainArea", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertAreaMapping", empIDParameter, areaIdParameter, isMainAreaParameter);
        }
    
        public virtual int DeleteAreaMapping(string empID)
        {
            var empIDParameter = empID != null ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAreaMapping", empIDParameter);
        }
    
        public virtual int InsertAreaApprover(Nullable<int> areaID, Nullable<byte> seq, string department, string positionID)
        {
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("AreaID", areaID) :
                new ObjectParameter("AreaID", typeof(int));
    
            var seqParameter = seq.HasValue ?
                new ObjectParameter("Seq", seq) :
                new ObjectParameter("Seq", typeof(byte));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var positionIDParameter = positionID != null ?
                new ObjectParameter("PositionID", positionID) :
                new ObjectParameter("PositionID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertAreaApprover", areaIDParameter, seqParameter, departmentParameter, positionIDParameter);
        }
    
        public virtual int UpdateEmployee(string empID, Nullable<bool> isLending, string updateBy)
        {
            var empIDParameter = empID != null ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(string));
    
            var isLendingParameter = isLending.HasValue ?
                new ObjectParameter("IsLending", isLending) :
                new ObjectParameter("IsLending", typeof(bool));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEmployee", empIDParameter, isLendingParameter, updateByParameter);
        }
    
        public virtual ObjectResult<EmployeeForImportAcs> GetEmployeeForImportAcs(string empID)
        {
            var empIDParameter = empID != null ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeForImportAcs>("GetEmployeeForImportAcs", empIDParameter);
        }
    
        public virtual ObjectResult<EmployeeForImportAcs> GetEmployeeForImportAcsToAdd(string tranID, Nullable<System.DateTime> sendDate)
        {
            var tranIDParameter = tranID != null ?
                new ObjectParameter("TranID", tranID) :
                new ObjectParameter("TranID", typeof(string));
    
            var sendDateParameter = sendDate.HasValue ?
                new ObjectParameter("SendDate", sendDate) :
                new ObjectParameter("SendDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeForImportAcs>("GetEmployeeForImportAcsToAdd", tranIDParameter, sendDateParameter);
        }
    
        public virtual ObjectResult<EmployeeForImportAcs> GetEmployeeForImportAcsToCancel(string tranID)
        {
            var tranIDParameter = tranID != null ?
                new ObjectParameter("TranID", tranID) :
                new ObjectParameter("TranID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeForImportAcs>("GetEmployeeForImportAcsToCancel", tranIDParameter);
        }
    
        public virtual int GetBatchProcess()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetBatchProcess");
        }
    
        public virtual int InsertAcsItemOutDetail(string reqNo, Nullable<short> seq, Nullable<int> itemID, string description, Nullable<bool> confdtFlag, Nullable<int> reqQty, Nullable<System.DateTime> planReturnDate, Nullable<int> actOutQty, Nullable<int> actReturnQty, Nullable<System.DateTime> actReturnDate, string updateBy)
        {
            var reqNoParameter = reqNo != null ?
                new ObjectParameter("ReqNo", reqNo) :
                new ObjectParameter("ReqNo", typeof(string));
    
            var seqParameter = seq.HasValue ?
                new ObjectParameter("Seq", seq) :
                new ObjectParameter("Seq", typeof(short));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var confdtFlagParameter = confdtFlag.HasValue ?
                new ObjectParameter("ConfdtFlag", confdtFlag) :
                new ObjectParameter("ConfdtFlag", typeof(bool));
    
            var reqQtyParameter = reqQty.HasValue ?
                new ObjectParameter("ReqQty", reqQty) :
                new ObjectParameter("ReqQty", typeof(int));
    
            var planReturnDateParameter = planReturnDate.HasValue ?
                new ObjectParameter("PlanReturnDate", planReturnDate) :
                new ObjectParameter("PlanReturnDate", typeof(System.DateTime));
    
            var actOutQtyParameter = actOutQty.HasValue ?
                new ObjectParameter("ActOutQty", actOutQty) :
                new ObjectParameter("ActOutQty", typeof(int));
    
            var actReturnQtyParameter = actReturnQty.HasValue ?
                new ObjectParameter("ActReturnQty", actReturnQty) :
                new ObjectParameter("ActReturnQty", typeof(int));
    
            var actReturnDateParameter = actReturnDate.HasValue ?
                new ObjectParameter("ActReturnDate", actReturnDate) :
                new ObjectParameter("ActReturnDate", typeof(System.DateTime));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertAcsItemOutDetail", reqNoParameter, seqParameter, itemIDParameter, descriptionParameter, confdtFlagParameter, reqQtyParameter, planReturnDateParameter, actOutQtyParameter, actReturnQtyParameter, actReturnDateParameter, updateByParameter);
        }
    
        public virtual ObjectResult<AcsItemOutDetailDataView> GetAcsItemOutDetailDataViews(string reqNo)
        {
            var reqNoParameter = reqNo != null ?
                new ObjectParameter("ReqNo", reqNo) :
                new ObjectParameter("ReqNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcsItemOutDetailDataView>("GetAcsItemOutDetailDataViews", reqNoParameter);
        }
    
        public virtual int InsertAcsItemInDetail(string reqNo, Nullable<short> seq, Nullable<int> itemID, string description, Nullable<bool> confdtFlag, Nullable<int> reqQty, Nullable<System.DateTime> planReturnDate, Nullable<int> actInQty, Nullable<int> actReturnQty, Nullable<System.DateTime> actReturnDate, string updateBy)
        {
            var reqNoParameter = reqNo != null ?
                new ObjectParameter("ReqNo", reqNo) :
                new ObjectParameter("ReqNo", typeof(string));
    
            var seqParameter = seq.HasValue ?
                new ObjectParameter("Seq", seq) :
                new ObjectParameter("Seq", typeof(short));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var confdtFlagParameter = confdtFlag.HasValue ?
                new ObjectParameter("ConfdtFlag", confdtFlag) :
                new ObjectParameter("ConfdtFlag", typeof(bool));
    
            var reqQtyParameter = reqQty.HasValue ?
                new ObjectParameter("ReqQty", reqQty) :
                new ObjectParameter("ReqQty", typeof(int));
    
            var planReturnDateParameter = planReturnDate.HasValue ?
                new ObjectParameter("PlanReturnDate", planReturnDate) :
                new ObjectParameter("PlanReturnDate", typeof(System.DateTime));
    
            var actInQtyParameter = actInQty.HasValue ?
                new ObjectParameter("ActInQty", actInQty) :
                new ObjectParameter("ActInQty", typeof(int));
    
            var actReturnQtyParameter = actReturnQty.HasValue ?
                new ObjectParameter("ActReturnQty", actReturnQty) :
                new ObjectParameter("ActReturnQty", typeof(int));
    
            var actReturnDateParameter = actReturnDate.HasValue ?
                new ObjectParameter("ActReturnDate", actReturnDate) :
                new ObjectParameter("ActReturnDate", typeof(System.DateTime));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertAcsItemInDetail", reqNoParameter, seqParameter, itemIDParameter, descriptionParameter, confdtFlagParameter, reqQtyParameter, planReturnDateParameter, actInQtyParameter, actReturnQtyParameter, actReturnDateParameter, updateByParameter);
        }
    
        public virtual ObjectResult<string> InsertAcsItemOut(string status, Nullable<System.DateTime> takeOutDate, Nullable<int> areaID, string company, string deptName, string takeOutName, Nullable<int> purposeCodeID, string otherPurpose, string note, string userName)
        {
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var takeOutDateParameter = takeOutDate.HasValue ?
                new ObjectParameter("TakeOutDate", takeOutDate) :
                new ObjectParameter("TakeOutDate", typeof(System.DateTime));
    
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("AreaID", areaID) :
                new ObjectParameter("AreaID", typeof(int));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var deptNameParameter = deptName != null ?
                new ObjectParameter("DeptName", deptName) :
                new ObjectParameter("DeptName", typeof(string));
    
            var takeOutNameParameter = takeOutName != null ?
                new ObjectParameter("TakeOutName", takeOutName) :
                new ObjectParameter("TakeOutName", typeof(string));
    
            var purposeCodeIDParameter = purposeCodeID.HasValue ?
                new ObjectParameter("PurposeCodeID", purposeCodeID) :
                new ObjectParameter("PurposeCodeID", typeof(int));
    
            var otherPurposeParameter = otherPurpose != null ?
                new ObjectParameter("OtherPurpose", otherPurpose) :
                new ObjectParameter("OtherPurpose", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("InsertAcsItemOut", statusParameter, takeOutDateParameter, areaIDParameter, companyParameter, deptNameParameter, takeOutNameParameter, purposeCodeIDParameter, otherPurposeParameter, noteParameter, userNameParameter);
        }
    
        public virtual ObjectResult<string> InsertAcsItemIn(string status, Nullable<System.DateTime> takeInDate, Nullable<int> areaID, string company, string deptName, string takeInName, Nullable<int> purposeCodeID, string otherPurpose, string note, string ackBy, string userName)
        {
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var takeInDateParameter = takeInDate.HasValue ?
                new ObjectParameter("TakeInDate", takeInDate) :
                new ObjectParameter("TakeInDate", typeof(System.DateTime));
    
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("AreaID", areaID) :
                new ObjectParameter("AreaID", typeof(int));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var deptNameParameter = deptName != null ?
                new ObjectParameter("DeptName", deptName) :
                new ObjectParameter("DeptName", typeof(string));
    
            var takeInNameParameter = takeInName != null ?
                new ObjectParameter("TakeInName", takeInName) :
                new ObjectParameter("TakeInName", typeof(string));
    
            var purposeCodeIDParameter = purposeCodeID.HasValue ?
                new ObjectParameter("PurposeCodeID", purposeCodeID) :
                new ObjectParameter("PurposeCodeID", typeof(int));
    
            var otherPurposeParameter = otherPurpose != null ?
                new ObjectParameter("OtherPurpose", otherPurpose) :
                new ObjectParameter("OtherPurpose", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var ackByParameter = ackBy != null ?
                new ObjectParameter("AckBy", ackBy) :
                new ObjectParameter("AckBy", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("InsertAcsItemIn", statusParameter, takeInDateParameter, areaIDParameter, companyParameter, deptNameParameter, takeInNameParameter, purposeCodeIDParameter, otherPurposeParameter, noteParameter, ackByParameter, userNameParameter);
        }
    
        public virtual ObjectResult<EmployeeForImportAcs> GetEmployeeForImportAcsByEffectiveDate(Nullable<System.DateTime> sendDate)
        {
            var sendDateParameter = sendDate.HasValue ?
                new ObjectParameter("SendDate", sendDate) :
                new ObjectParameter("SendDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeForImportAcs>("GetEmployeeForImportAcsByEffectiveDate", sendDateParameter);
        }
    
        public virtual int UpdateAcsItemOut(string reqNo, string status, Nullable<System.DateTime> takeOutDate, Nullable<int> areaID, string company, string deptName, string takeOutName, Nullable<int> purposeCodeID, string otherPurpose, string note, string userName)
        {
            var reqNoParameter = reqNo != null ?
                new ObjectParameter("ReqNo", reqNo) :
                new ObjectParameter("ReqNo", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var takeOutDateParameter = takeOutDate.HasValue ?
                new ObjectParameter("TakeOutDate", takeOutDate) :
                new ObjectParameter("TakeOutDate", typeof(System.DateTime));
    
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("AreaID", areaID) :
                new ObjectParameter("AreaID", typeof(int));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var deptNameParameter = deptName != null ?
                new ObjectParameter("DeptName", deptName) :
                new ObjectParameter("DeptName", typeof(string));
    
            var takeOutNameParameter = takeOutName != null ?
                new ObjectParameter("TakeOutName", takeOutName) :
                new ObjectParameter("TakeOutName", typeof(string));
    
            var purposeCodeIDParameter = purposeCodeID.HasValue ?
                new ObjectParameter("PurposeCodeID", purposeCodeID) :
                new ObjectParameter("PurposeCodeID", typeof(int));
    
            var otherPurposeParameter = otherPurpose != null ?
                new ObjectParameter("OtherPurpose", otherPurpose) :
                new ObjectParameter("OtherPurpose", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAcsItemOut", reqNoParameter, statusParameter, takeOutDateParameter, areaIDParameter, companyParameter, deptNameParameter, takeOutNameParameter, purposeCodeIDParameter, otherPurposeParameter, noteParameter, userNameParameter);
        }
    
        public virtual int UpdateAcsItemOutDetail(Nullable<System.Guid> detailID, Nullable<short> seq, Nullable<int> itemID, string description, Nullable<bool> confdtFlag, Nullable<int> reqQty, Nullable<System.DateTime> planReturnDate, Nullable<int> actOutQty, Nullable<int> actReturnQty, Nullable<System.DateTime> actReturnDate, string updateBy)
        {
            var detailIDParameter = detailID.HasValue ?
                new ObjectParameter("DetailID", detailID) :
                new ObjectParameter("DetailID", typeof(System.Guid));
    
            var seqParameter = seq.HasValue ?
                new ObjectParameter("Seq", seq) :
                new ObjectParameter("Seq", typeof(short));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var confdtFlagParameter = confdtFlag.HasValue ?
                new ObjectParameter("ConfdtFlag", confdtFlag) :
                new ObjectParameter("ConfdtFlag", typeof(bool));
    
            var reqQtyParameter = reqQty.HasValue ?
                new ObjectParameter("ReqQty", reqQty) :
                new ObjectParameter("ReqQty", typeof(int));
    
            var planReturnDateParameter = planReturnDate.HasValue ?
                new ObjectParameter("PlanReturnDate", planReturnDate) :
                new ObjectParameter("PlanReturnDate", typeof(System.DateTime));
    
            var actOutQtyParameter = actOutQty.HasValue ?
                new ObjectParameter("ActOutQty", actOutQty) :
                new ObjectParameter("ActOutQty", typeof(int));
    
            var actReturnQtyParameter = actReturnQty.HasValue ?
                new ObjectParameter("ActReturnQty", actReturnQty) :
                new ObjectParameter("ActReturnQty", typeof(int));
    
            var actReturnDateParameter = actReturnDate.HasValue ?
                new ObjectParameter("ActReturnDate", actReturnDate) :
                new ObjectParameter("ActReturnDate", typeof(System.DateTime));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAcsItemOutDetail", detailIDParameter, seqParameter, itemIDParameter, descriptionParameter, confdtFlagParameter, reqQtyParameter, planReturnDateParameter, actOutQtyParameter, actReturnQtyParameter, actReturnDateParameter, updateByParameter);
        }
    
        public virtual ObjectResult<AcsItemInDetailDataView> GetAcsItemInDetailDataViews(string reqNo)
        {
            var reqNoParameter = reqNo != null ?
                new ObjectParameter("ReqNo", reqNo) :
                new ObjectParameter("ReqNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcsItemInDetailDataView>("GetAcsItemInDetailDataViews", reqNoParameter);
        }
    
        public virtual int UpdateAcsItemInDetail(Nullable<System.Guid> detailID, Nullable<short> seq, Nullable<int> itemID, string description, Nullable<bool> confdtFlag, Nullable<int> reqQty, Nullable<System.DateTime> planReturnDate, Nullable<int> actInQty, Nullable<int> actReturnQty, Nullable<System.DateTime> actReturnDate, string updateBy)
        {
            var detailIDParameter = detailID.HasValue ?
                new ObjectParameter("DetailID", detailID) :
                new ObjectParameter("DetailID", typeof(System.Guid));
    
            var seqParameter = seq.HasValue ?
                new ObjectParameter("Seq", seq) :
                new ObjectParameter("Seq", typeof(short));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var confdtFlagParameter = confdtFlag.HasValue ?
                new ObjectParameter("ConfdtFlag", confdtFlag) :
                new ObjectParameter("ConfdtFlag", typeof(bool));
    
            var reqQtyParameter = reqQty.HasValue ?
                new ObjectParameter("ReqQty", reqQty) :
                new ObjectParameter("ReqQty", typeof(int));
    
            var planReturnDateParameter = planReturnDate.HasValue ?
                new ObjectParameter("PlanReturnDate", planReturnDate) :
                new ObjectParameter("PlanReturnDate", typeof(System.DateTime));
    
            var actInQtyParameter = actInQty.HasValue ?
                new ObjectParameter("ActInQty", actInQty) :
                new ObjectParameter("ActInQty", typeof(int));
    
            var actReturnQtyParameter = actReturnQty.HasValue ?
                new ObjectParameter("ActReturnQty", actReturnQty) :
                new ObjectParameter("ActReturnQty", typeof(int));
    
            var actReturnDateParameter = actReturnDate.HasValue ?
                new ObjectParameter("ActReturnDate", actReturnDate) :
                new ObjectParameter("ActReturnDate", typeof(System.DateTime));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAcsItemInDetail", detailIDParameter, seqParameter, itemIDParameter, descriptionParameter, confdtFlagParameter, reqQtyParameter, planReturnDateParameter, actInQtyParameter, actReturnQtyParameter, actReturnDateParameter, updateByParameter);
        }
    
        public virtual int UpdateAcsItemIn(string reqNo, Nullable<System.DateTime> takeInDate, Nullable<int> areaID, string company, string deptName, string takeInName, Nullable<int> purposeCodeID, string otherPurpose, string note, string updateBy)
        {
            var reqNoParameter = reqNo != null ?
                new ObjectParameter("ReqNo", reqNo) :
                new ObjectParameter("ReqNo", typeof(string));
    
            var takeInDateParameter = takeInDate.HasValue ?
                new ObjectParameter("TakeInDate", takeInDate) :
                new ObjectParameter("TakeInDate", typeof(System.DateTime));
    
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("AreaID", areaID) :
                new ObjectParameter("AreaID", typeof(int));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var deptNameParameter = deptName != null ?
                new ObjectParameter("DeptName", deptName) :
                new ObjectParameter("DeptName", typeof(string));
    
            var takeInNameParameter = takeInName != null ?
                new ObjectParameter("TakeInName", takeInName) :
                new ObjectParameter("TakeInName", typeof(string));
    
            var purposeCodeIDParameter = purposeCodeID.HasValue ?
                new ObjectParameter("PurposeCodeID", purposeCodeID) :
                new ObjectParameter("PurposeCodeID", typeof(int));
    
            var otherPurposeParameter = otherPurpose != null ?
                new ObjectParameter("OtherPurpose", otherPurpose) :
                new ObjectParameter("OtherPurpose", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAcsItemIn", reqNoParameter, takeInDateParameter, areaIDParameter, companyParameter, deptNameParameter, takeInNameParameter, purposeCodeIDParameter, otherPurposeParameter, noteParameter, updateByParameter);
        }
    
        public virtual int UpdateAcsItemInForAuthor(string reqNo, string status, string note, string updateBy)
        {
            var reqNoParameter = reqNo != null ?
                new ObjectParameter("ReqNo", reqNo) :
                new ObjectParameter("ReqNo", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAcsItemInForAuthor", reqNoParameter, statusParameter, noteParameter, updateByParameter);
        }
    
        public virtual ObjectResult<AreaDataView> GetAreaDataView(Nullable<int> areaID)
        {
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("AreaID", areaID) :
                new ObjectParameter("AreaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AreaDataView>("GetAreaDataView", areaIDParameter);
        }
    
        public virtual ObjectResult<ReqApproverList> GetLatestReqApproverList(string requestNo)
        {
            var requestNoParameter = requestNo != null ?
                new ObjectParameter("RequestNo", requestNo) :
                new ObjectParameter("RequestNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReqApproverList>("GetLatestReqApproverList", requestNoParameter);
        }
    
        public virtual ObjectResult<ReqApproverList> GetLatestReqApproverList(string requestNo, MergeOption mergeOption)
        {
            var requestNoParameter = requestNo != null ?
                new ObjectParameter("RequestNo", requestNo) :
                new ObjectParameter("RequestNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReqApproverList>("GetLatestReqApproverList", mergeOption, requestNoParameter);
        }
    
        public virtual ObjectResult<AcsVisitorTransactionDataView> GetAcsVisitorTransactionDataViews(string requestNo)
        {
            var requestNoParameter = requestNo != null ?
                new ObjectParameter("RequestNo", requestNo) :
                new ObjectParameter("RequestNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcsVisitorTransactionDataView>("GetAcsVisitorTransactionDataViews", requestNoParameter);
        }
    
        public virtual int UpdateVisitorCardRegistration(Nullable<System.Guid> tranID, Nullable<System.Guid> detailID, string cardID, string updateBy, Nullable<int> verifyType, string verifyNo)
        {
            var tranIDParameter = tranID.HasValue ?
                new ObjectParameter("TranID", tranID) :
                new ObjectParameter("TranID", typeof(System.Guid));
    
            var detailIDParameter = detailID.HasValue ?
                new ObjectParameter("DetailID", detailID) :
                new ObjectParameter("DetailID", typeof(System.Guid));
    
            var cardIDParameter = cardID != null ?
                new ObjectParameter("CardID", cardID) :
                new ObjectParameter("CardID", typeof(string));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            var verifyTypeParameter = verifyType.HasValue ?
                new ObjectParameter("VerifyType", verifyType) :
                new ObjectParameter("VerifyType", typeof(int));
    
            var verifyNoParameter = verifyNo != null ?
                new ObjectParameter("VerifyNo", verifyNo) :
                new ObjectParameter("VerifyNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateVisitorCardRegistration", tranIDParameter, detailIDParameter, cardIDParameter, updateByParameter, verifyTypeParameter, verifyNoParameter);
        }
    
        public virtual ObjectResult<EmployeeApprovalDataView> GetGAApprover()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeApprovalDataView>("GetGAApprover");
        }
    
        public virtual int DeleteAcsItemInDetail(string requestNo)
        {
            var requestNoParameter = requestNo != null ?
                new ObjectParameter("RequestNo", requestNo) :
                new ObjectParameter("RequestNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAcsItemInDetail", requestNoParameter);
        }
    
        public virtual int DeleteAcsItemOutDetail(string requestNo)
        {
            var requestNoParameter = requestNo != null ?
                new ObjectParameter("RequestNo", requestNo) :
                new ObjectParameter("RequestNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAcsItemOutDetail", requestNoParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CreateUser(string employeeID, string createBy)
        {
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CreateUser", employeeIDParameter, createByParameter);
        }
    
        public virtual int CreateEmployeeRoleMapping(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateEmployeeRoleMapping", userIDParameter);
        }
    
        public virtual ObjectResult<AreaOrganizeMapping> GetAreaOrganizeMappings(string positionID, string departmentID, string specialPositionID)
        {
            var positionIDParameter = positionID != null ?
                new ObjectParameter("PositionID", positionID) :
                new ObjectParameter("PositionID", typeof(string));
    
            var departmentIDParameter = departmentID != null ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(string));
    
            var specialPositionIDParameter = specialPositionID != null ?
                new ObjectParameter("SpecialPositionID", specialPositionID) :
                new ObjectParameter("SpecialPositionID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AreaOrganizeMapping>("GetAreaOrganizeMappings", positionIDParameter, departmentIDParameter, specialPositionIDParameter);
        }
    
        public virtual ObjectResult<AreaOrganizeMapping> GetAreaOrganizeMappings(string positionID, string departmentID, string specialPositionID, MergeOption mergeOption)
        {
            var positionIDParameter = positionID != null ?
                new ObjectParameter("PositionID", positionID) :
                new ObjectParameter("PositionID", typeof(string));
    
            var departmentIDParameter = departmentID != null ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(string));
    
            var specialPositionIDParameter = specialPositionID != null ?
                new ObjectParameter("SpecialPositionID", specialPositionID) :
                new ObjectParameter("SpecialPositionID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AreaOrganizeMapping>("GetAreaOrganizeMappings", mergeOption, positionIDParameter, departmentIDParameter, specialPositionIDParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> UpdateDocument(Nullable<int> requestType)
        {
            var requestTypeParameter = requestType.HasValue ?
                new ObjectParameter("RequestType", requestType) :
                new ObjectParameter("RequestType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("UpdateDocument", requestTypeParameter);
        }
    }
}
